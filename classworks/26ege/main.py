from time import time
from math import ceil

start = time()
def timecomplite() -> None:
    print('\nThe program was completed in {} second!'.format(time() - start))
    return None

'''
1) В текстовом файле 26-1.txt находятся данные в формате, описанном выше в
формулировке задачи Р00. Решите задачу Р00.

Р-00 (демо-2021). Системный администратор раз в неделю создаёт архив
пользовательских файлов. Однако объём диска, куда он помещает архив,
может быть меньше, чем суммарный объём архивируемых файлов. Известно,
какой объём занимает файл каждого пользователя. По заданной информации
об объёме файлов пользователей и свободном объёме на архивном диске
определите максимальное число пользователей, чьи файлы можно сохранить в архиве,
а также максимальный размер имеющегося файла, который может быть сохранён
в архиве, при условии, что сохранены файлы максимально возможного числа
пользователей. 
Входные данные. В первой строке входного файла 26.txt находятся два числа:
S – размер свободного места на диске (натуральное число, не превышающее 100 000)
и N – количество пользователей (натуральное число, не превышающее 10000).
В следующих N строках находятся значения объёмов файлов каждого пользователя
(все числа натуральные, не превышающие 100), каждое в отдельной строке.
Запишите в ответе два числа: сначала наибольшее число пользователей,
чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося
файла, который может быть сохранён в архиве, при условии, что сохранены
файлы максимально возможного числа пользователей. 
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей.
Возможные объёмы этих двух файлов 30 и 40, 30 и 50 или 40 и 50.
Наибольший объём файла из перечисленных пар – 50, поэтому ответ для
приведённого примера:
2 50
'''
##with open('data/26-1.txt') as f:
##    m, n = map(int, f.readline().split())
##    data = list(map(int, f.readlines()))
##s = m
##data.sort()
##a = []
##i = 0
##flag = True
##while flag:
##    if s - data[i] >= 0:
##        s -= data[i]
##        a.append(data[i])
##    else:
##        if sum(a[:-1] + [data[i]]) <= m:
##            a.pop(-1)
##            s -= data[i]
##            a.append(data[i])
##        else:
##            flag = False
##    i += 1
##
##print(len(a), max(a))
##timecomplite()


'''
11) В текстовом файле 26-11.txt находятся данные в формате,
описанном выше в формулировке задачи Р00. Решите задачу Р00.

Р-00 (демо-2021). Системный администратор раз в неделю создаёт архив
пользовательских файлов. Однако объём диска, куда он помещает архив,
может быть меньше, чем суммарный объём архивируемых файлов. Известно,
какой объём занимает файл каждого пользователя. По заданной информации
об объёме файлов пользователей и свободном объёме на архивном диске
определите максимальное число пользователей, чьи файлы можно сохранить в архиве,
а также максимальный размер имеющегося файла, который может быть сохранён
в архиве, при условии, что сохранены файлы максимально возможного числа
пользователей. 
Входные данные. В первой строке входного файла 26.txt находятся два числа:
S – размер свободного места на диске (натуральное число, не превышающее 100 000)
и N – количество пользователей (натуральное число, не превышающее 10000).
В следующих N строках находятся значения объёмов файлов каждого пользователя
(все числа натуральные, не превышающие 100), каждое в отдельной строке.
Запишите в ответе два числа: сначала наибольшее число пользователей,
чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося
файла, который может быть сохранён в архиве, при условии, что сохранены
файлы максимально возможного числа пользователей. 
Пример входного файла:
100 4
80
30
50
40
При таких исходных данных можно сохранить файлы максимум двух пользователей.
Возможные объёмы этих двух файлов 30 и 40, 30 и 50 или 40 и 50.
Наибольший объём файла из перечисленных пар – 50, поэтому ответ для
приведённого примера:
2 50
'''
##with open('data/26-11.txt') as f:
##    m, n = map(int, f.readline().split())
##    data = list(map(int, f.readlines()))
##s = m
##data.sort()
##a = []
##i = 0
##flag = True
##while flag:
##    try:
##        if s - data[i] >= 0:
##            s -= data[i]
##            a.append(data[i])
##        else:
##            if sum(a[:-1] + [data[i]]) <= m:
##                a.pop(-1)
##                s -= data[i]
##                a.append(data[i])
##            else:
##                flag = False
##        i += 1
##    except IndexError:
##        print('Full')
##        break
##
##print(len(a), max(a))
##timecomplite()


'''
21) (А.М. Кабанов, г. Тольятти) В магазине электроники раз в месяц
проводится распродажа. Из всех товаров выбирают K товаров с самой большой
ценой и делают на них скидку в 20%. По заданной информации о цене каждого
из товаров и количестве товаров, на которые будет скидка, определите цену
самого дорогого товара, не участвующего в распродаже, а также целую часть
от суммы всех скидок.
Входные и выходные данные. В первой строке входного файла 26-k1.txt находятся
два числа, записанные через пробел: N – общее количество цен
(натуральное число, не превышающее 10 000) и K – количество товаров со скидкой.
В следующих N строках находятся значения цены каждого из товаров
(все числа натуральные, не превышающие 10 000), каждое в отдельной строке.
Запишите в ответе два числа: сначала цену самого дорогого товара,
не участвующего в распродаже, а затем целую часть от суммы всех скидок.
Пример входного файла: 
10 3
1800
3600
3700
800
2600
2500
1800
1500
1900
1200
При таких исходных данных ответ должен содержать два числа – 2500 и 1980.
Пояснение: скидка будет на товары стоимостью 3700, 3600, 2600.
Тогда самый дорогой товар без скидки стоит 2500,
а сумма скидок 740+720+520 = 1980.
'''
##with open('data/26-k1.txt') as f:
##    n, k = map(int, f.readline().split())
##    data = list(map(int, f.readlines()))
##data.sort(reverse=True)
##print(data[k], sum(data[:k]) * 0.2)
##timecomplite()


'''
31) Магазин предоставляет оптовому покупателю скидку по следующим правилам:
− на каждый второй товар ценой больше 100 рублей предоставляется скидка 10 %;
− общая цена покупки со скидкой округляется вверх до целого числа рублей;
− порядок товаров в списке определяет магазин и делает это так,
чтобы общаясумма скидки была наименьшей.
Вам необходимо определить общую цену закупки с учётом скидки и цену самого
дорогого товара, на который будет предоставлена скидка.
Входные данные. Первая строка входного файла 26-s1.txt содержит число
N – общее количество купленных товаров. Каждая из следующих N строк
содержит одно целое число – цену товара в рублях. В ответе запишите два целых
числа: сначала общую цену покупки с учётом скидки, затем цену самого дорогого
товара, на который предоставлена скидка.
Пример входного файла
7
225
160
380
95
192
310
60
В данном случае товары с ценой 60 и 95 не участвуют в определении скидки,
остальные товары магазину выгодно расположить в таком порядке цен:
380, 160, 225, 192, 310. Скидка предоставляется на товары ценой 160 и 192.
Суммарная цена этих двух товаров со скидкой составит 316,8 руб.,
после округления – 317 руб. Общая цена покупки составит:
60 + 95 + 317 + 380 + 225 + 310 = 1387 руб. Самый дорогой товар,
на который будет получена скидка, стоит 192 руб. В ответе нужно записать числа
1387 и 192.
'''
with open('data/26-s1.txt') as f:
    n = map(int, f.readline())
    data = list(map(int, f.readlines()))
data100 = sorted([i for i in data if i > 100])
datau100 = [i for i in data if i <= 100]
mx = 0
for i in range(len(data100[:len(data100) // 2])):
    mx = max(mx, data100[i])
    data100[i] = data100[i] * 0.9
print(ceil(sum(data100 + datau100)), mx)

