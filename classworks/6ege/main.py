from turtle import *
from math import sqrt, fabs, tan, pi, sin

'''
test #1
'''
##left(90)
##m = 10 # инициируем параметры
##color('black', 'red')
##begin_fill()
##
##for i in range(4):
##    forward(12 * m)
##    right(90)
##end_fill()
##
##canvas = getcanvas()
##print(canvas.find_all())
##
##c = 0
##for x in range(-100*m, 100*m, m):
##    for y in range(-100*m, 100*m, m):
##        item = canvas.find_overlapping(x, y, x, y)
##        if len(item) == 1 and item[0] == 5:
##            c += 1
##print(c)
##
##mainloop()


'''
4) Исполнитель Черепаха действует на плоскости с декартовой системой координат.
В начальный момент Черепаха находится в начале координат, её голова направлена
вдоль положительного направления оси ординат, хвост опущен. При опущенном
хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный
момент известно положение исполнителя и направление его движения.
У исполнителя существует две команды: Вперёд n (где n – целое число),
вызывающая передвижение Черепахи на n единиц в том направлении, куда
указывает её голова, и Направо m (где m – целое число), вызывающая изменение
направления движения на m градусов по часовой стрелке. Запись 
Повтори k [Команда1 Команда2 … КомандаS] 
означает, что последовательность из S команд повторится k раз. Черепахе был
дан для исполнения следующий алгоритм:
Повтори 10 [Направо 60 Вперёд 10 Направо 60]
Определите, сколько точек с целочисленными координатами будут находиться
внутри области, ограниченной линией, заданной данным алгоритмом. Точки на
линии учитывать не следует.
'''
##def line(a: float, b: float) -> float:
##    x1, y1 = a
##    x2, y2 = b
##    return sqrt((x1-x2)**2+(y1-y2)**2)
##
##
##def geron(a: float, b: float, c: float) -> float:
##    p = (a + b + c)/2
##    g2 = p*(p-a)*(p-b)*(p-c)
##    if g2 < 0:
##        return 0
##    return sqrt(g2)
##
##
##def s(a: float, n: int) -> float:
##    return (a**2*n)/(4*tan(pi/n))
##
##
##left(90)
##a = 10
##n = 3
##alpha = 60
##color('black', 'red')
##begin_fill()
##dots = [(0.00,0.00)]
##
##for i in range(n):
##    right(alpha)
##    forward(a)
##    dots.append(pos())
##    right(alpha)
##end_fill()
##
##c = 0
##s = s(a, n)
##for x in range(-100, 100):
##    for y in range(-100, 100):
##        s1 = 0
##        zero = False
##        for i in range(len(dots) - 1):
##            l1 = line((x, y), dots[i])
##            l2 = line((x, y), dots[i+1])
##            l3 = line(dots[i], dots[i+1])
##            tmp = geron(l1, l2, l3)
##            s1 += tmp
##            if tmp < 0.01:
##                zero = True
##        if fabs(s1 - s) < 0.01 and not zero:
##            c += 1
##print(c)


'''
5)	Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: Вперёд n (где n – целое число), вызывающая передвижение Черепахи на n единиц в том направлении, куда указывает её голова, и Направо m (где m – целое число), вызывающая изменение направления движения на m градусов по часовой стрелке. Запись 
Повтори k [Команда1 Команда2 … КомандаS] 
означает, что последовательность из S команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:
Повтори 8 [Вперёд 12 Направо 90]
Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.
'''
##def line(a: float, b: float) -> float:
##    x1, y1 = a
##    x2, y2 = b
##    return sqrt((x1-x2)**2+(y1-y2)**2)
##
##
##def geron(a: float, b: float, c: float) -> float:
##    p = (a + b + c)/2
##    g2 = p*(p-a)*(p-b)*(p-c)
##    if g2 < 0:
##        return 0
##    return sqrt(g2)
##
##def s(a: float, n: int) -> float:
##    return (a**2*n)/(4*tan(pi/n))
##
##
##left(90)
##a = 12
##n = 4
##alpha = 90
##color('black', 'red')
##begin_fill()
##dots = [(0.00,0.00)]
##
##for i in range(n):
##    forward(a)
##    dots.append(pos())
##    right(alpha)
##end_fill()
##
##c = 0
##s = s(a, n)
##for x in range(-100, 100):
##    for y in range(-100, 100):
##        s1 = 0
##        zero = False
##        for i in range(len(dots) - 1):
##            l1 = line((x, y), dots[i])
##            l2 = line((x, y), dots[i+1])
##            l3 = line(dots[i], dots[i+1])
##            tmp = geron(l1, l2, l3)
##            s1 += tmp
##            if tmp < 0.01:
##                zero = True
##        if fabs(s1 - s) < 0.01 and not zero:
##            c += 1
##print(c)


'''
13) (А. Носкин) Исполнитель Черепаха действует на плоскости с декартовой
системой координат. В начальный момент Черепаха находится в начале координат,
её голова направлена вдоль положительного направления оси ординат,
хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии.
В каждый конкретный момент известно положение исполнителя и направление его
движения. У исполнителя существует две команды: Вперёд n (где n – целое число),
вызывающая передвижение Черепахи на n единиц в том направлении, куда указывает
её голова, и Направо m (где m – целое число), вызывающая изменение направления
движения на m градусов по часовой стрелке. Запись 
Повтори k [Команда1 Команда2 … КомандаS] 
означает, что последовательность из S команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:
Вперёд 200
Повтори 4 [Направо 90 Вперёд 100]
В результате Черепаха нарисовала линию. Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной этой линией, и на самой линии. 
'''
##left(90) # *не сходится
##m = 1
##color('black', 'red')
##begin_fill()
##
##forward(200 * m)
##for i in range(3):
##    right(90)
##    forward(100 * m)
##end_fill()
##
##canvas = getcanvas()
##print(canvas.find_all())
##
##c = 0
##for x in range(-500*m, 500*m, m):
##    for y in range(-500*m, 500*m, m):
##        item = canvas.find_overlapping(x, y, x, y)
##        if len(item) == 1 and item[0] > 3:
##            c += 1
##print(c)
##
##mainloop()


'''
14)	(М. Ишимов) Исполнитель Черепаха действует на плоскости с
декартовой системой координат. В начальный момент Черепаха находится в
начале координат, её голова направлена вдоль положительного направления оси
ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след
в виде линии. В каждый конкретный момент известно положение исполнителя и
направление его движения. У исполнителя существует две команды: Вперёд n
(где n – целое число), вызывающая передвижение Черепахи на n единиц в том
направлении, куда указывает её голова, и Направо m (где m – целое число),
вызывающая изменение направления движения на m градусов по часовой стрелке.
Запись 
Повтори k [Команда1 Команда2 … КомандаS] 
означает, что последовательность из S команд повторится k раз.
Черепахе был дан для исполнения следующий алгоритм:
Повтори 11 [Вперёд 4 Направо 60]
Определите, сколько точек с целочисленными положительными координатами будут
находиться внутри области, ограниченной линией, заданной данным алгоритмом.
Точки на линии учитывать не следует.
'''
##left(90)
##m = 20
##color('black', 'red')
##begin_fill()
##speed(0)
##
##for i in range(6):
##    forward(4 * m)
##    right(60)
##
##end_fill()
##
##canvas = getcanvas()
##print(canvas.find_all())
##penup()
##
##for x in range(0*m, 10*m, m):
##    for y in range(0*m, 10*m, m):
##        item = canvas.find_overlapping(x, y, x, y)
##        goto(x, y)
##        dot(3, 'green')
##
##mainloop()


'''
21) (Л. Евич) Исполнитель Черепаха действует на плоскости с декартовой
системой координат. В начальный момент Черепаха находится в начале координат,
её голова направлена вдоль положительного направления оси ординат, хвост опущен.
При опущенном хвосте Черепаха оставляет на поле след в виде линии.
В каждый конкретный момент известно положение исполнителя и направление его
движения. У исполнителя существует две команды: Вперёд n (где n – целое число),
вызывающая передвижение Черепахи на n единиц в том направлении, куда указывает
её голова, и Налево m (где m – целое число), вызывающая изменение направления
движения на m градусов против часовой стрелки.
Запись 
Повтори k [Команда1 Команда2 … КомандаS] 
означает, что последовательность из S команд повторится k раз.
Черепахе был дан для исполнения следующий алгоритм:
Повтори 7 [Налево 60 Вперёд 5 Налево 120 Вперёд 5]
Определите, сколько точек с целочисленными координатами будут находиться
внутри области, ограниченной линией, заданной данным алгоритмом.
Точки на линии учитывать не следует.
'''
##def line(a: float, b: float) -> float:
##    x1, y1 = a
##    x2, y2 = b
##    return sqrt((x1-x2)**2+(y1-y2)**2)
##
##
##def geron(a: float, b: float, c: float) -> float:
##    p = (a + b + c)/2
##    g2 = p*(p-a)*(p-b)*(p-c)
##    if g2 < 0:
##        return 0
##    return sqrt(g2)
##
##
##def s(a: float) -> float:
##    return 2 * 1/2 * a**2 * sin(pi/3)
##
##
##left(90)
##a = 5
##n = 2
##alpha1 = 60
##alpha2 = 120
##color('black', 'red')
##begin_fill()
##dots = [(0.00,0.00)]
##
##for i in range(n):
##    left(alpha1)
##    forward(a)
##    dots.append(pos())
##    left(alpha2)
##    forward(a)
##    dots.append(pos())
##end_fill()
##
##c = 0
##s = s(a)
##for x in range(-100, 100):
##    for y in range(-100, 100):
##        s1 = 0
##        zero = False
##        for i in range(len(dots) - 1):
##            l1 = line((x, y), dots[i])
##            l2 = line((x, y), dots[i+1])
##            l3 = line(dots[i], dots[i+1])
##            tmp = geron(l1, l2, l3)
##            s1 += tmp
##            if tmp < 0.01:
##                zero = True
##        if fabs(s1 - s) < 0.01 and not zero:
##            c += 1
##print(c)


'''
28)	(Л. Евич) Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: Вперёд n (где n – целое число), вызывающая передвижение Черепахи на n единиц в том направлении, куда указывает её голова, и Направо m (где m – целое число), вызывающая изменение направления движения на m градусов по часовой стрелке. Запись 
Повтори k [Команда1 Команда2 … КомандаS] 
означает, что последовательность из S команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:
Повтори 5 [Вперёд 8 Направо 120 Повтори 2 [Вперёд 4 Направо 60]
Вперёд 4 Направо 120]
Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.
'''
##def line(a: float, b: float) -> float:
##    x1, y1 = a
##    x2, y2 = b
##    return sqrt((x1-x2)**2+(y1-y2)**2)
##
##
##def geron(a: float, b: float, c: float) -> float:
##    p = (a + b + c)/2
##    g2 = p*(p-a)*(p-b)*(p-c)
##    if g2 < 0:
##        return 0
##    return sqrt(g2)
##
##
##def s(a: float, b: float) -> float:
##    h = sqrt(b**2-((a-b)/2)**2)
##    return ((a+b)/2)*h
##
##
##left(90)
##a = 8
##b = 4
##n = 2
##alpha1 = 60
##alpha2 = 120
##m = 1
##color('black', 'red')
##begin_fill()
##dots = [(0.00,0.00)]
##
##for i in range(1):
##    forward(a * m)
##    dots.append(pos())
##    right(alpha2)
##    for j in range(2):
##        forward(b * m)
##        dots.append(pos())
##        right(alpha1)
##    forward(b * m)
##    dots.append(pos())
##    right(alpha2)
##end_fill()
##
##
##c = 0
##s = s(a, b)
##for x in range(-100, 100):
##    for y in range(-100, 100):
##        s1 = 0
##        zero = False
##        for i in range(len(dots) - 1):
##            l1 = line((x, y), dots[i])
##            l2 = line((x, y), dots[i+1])
##            l3 = line(dots[i], dots[i+1])
##            tmp = geron(l1, l2, l3)
##            s1 += tmp
##            if tmp < 0.1:
##                zero = True
##        if fabs(s1 - s) < 0.1 and not zero:
##            c += 1
##print(c)


'''
30) (Л. Евич) Исполнитель Чертёжник перемещается на координатной плоскости,
оставляя след в виде линии. Чертёжник может выполнять команду Сместиться на
(a,b) (где a, b — целые числа), перемещающую  Чертёжника из точки с
координатами (x, y) в точку с координатами (x+a, y+b). Если числа a, b
положительные, то значение соответствующей координаты увеличивается, если
отрицательные — уменьшается.
Например, если Чертёжник находится в точке с координатами (4, 2), то команда
Сместиться на (2,-3) переместит Чертёжника в точку (6,-1).
Запись  
Повтори k раз
  Команда1 Команда2 Команда3
конец 
означает, что последовательность Команда1 Команда2 Команда3 повторится k раз.
Чертёжнику был дан для исполнения следующий алгоритм:
Повтори 10 раз
  Сместиться на (3,6) 
  Сместиться на (7,-2) 
  Сместиться на (-10,-4) 
Конец 
Перед началом алгоритма Чертёжник находился в точке с координатами (0, 0).
Определите, сколько точек с целочисленными координатами будут находиться
внутри области, ограниченной линией, заданной данным алгоритмом. Точки на
линии учитывать не следует.
'''
def line(a: float, b: float) -> float:
    x1, y1 = a
    x2, y2 = b
    return sqrt((x1-x2)**2+(y1-y2)**2)


def geron(a: float, b: float, c: float) -> float:
    p = (a + b + c)/2
    g2 = p*(p-a)*(p-b)*(p-c)
    if g2 < 0:
        return 0
    return sqrt(g2)


left(90)
a = 8
b = 4
n = 2
alpha1 = 60
alpha2 = 120
m = 1
color('black', 'red')
begin_fill()
come = [(3*m,6*m),
        (7*m,-2*m),
        (-10*m,-4*m)]
dots = [(0.00,0.00)]
x, y = 0, 0
for i in come:
    x, y = x + i[0], y +i[1]
    goto(x, y)
    dots.append(pos())
end_fill()

c = 0
print(dots)
l1 = line(dots[0], dots[1])
l2 = line(dots[1], dots[2])
l3 = line(dots[2], dots[3])
s = geron(l1, l2, l3)
for x in range(-100, 100):
    for y in range(-100, 100):
        s1 = 0
        zero = False
        for i in range(len(dots) - 1):
            l1 = line((x, y), dots[i])
            l2 = line((x, y), dots[i+1])
            l3 = line(dots[i], dots[i+1])
            tmp = geron(l1, l2, l3)
            s1 += tmp
            if tmp < 0.1:
                zero = True
        if fabs(s1 - s) < 0.1 and not zero:
            c += 1
print(c)
