"""
№ 6635 Пробник ИМЦ СПб (Уровень: Средний)
Исполнитель Троечка преобразует число, записанное на доске. У Троечки есть две команды:
1. Вычесть 3
2. Умножить на -3
Первая команда уменьшает число на 3, вторая команда умножает его на –3.
Сколько различных отрицательных результатов можно получить из исходного числа 333 в ходе исполнения программы,
содержащей ровно 13 команд?
"""
# # TODO: Ответ — 2224
s = set()
def f(x, n):
    if n == 13:
        if x < 0:
            s.add(x)
        return 0
    f(x - 3, n + 1)
    f(x * (-3), n + 1)


f(333, 0)
print(len(s))


'''
1. Исполнитель Калькулятор преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:
1. Прибавить 1
2. Прибавить 3
3. Умножить на 3
Программа для исполнителя Калькулятор – это последовательность команд. Сколько существует программ, для которых при
исходном числе 1 результатом является число 15?
'''
##l = [0] * 100 # создаем массив с будущими ответами
##l[1] = 1 # передаем значение пустой программы
##for i in range(1, 16): # перебор до n-ного значения
##    l[i+1] += l[i] # исполнение по условию
##    l[i+3] += l[i]
##    l[i*3] += l[i]
##print(l[15]) # вывод ответа
## # индекс - само число; значение внутри индекса - количество программ

'''
2. (Е. Джобс) Исполнитель Калькулятор преобразует число, записанное на экране. У исполнителя есть три команды, которым
присвоены номера:
1. Прибавь 1
2. Умножь на 2
3. Сделай нечётное
Первая команда увеличивает число на 1, вторая – вдвое, третья прибавляет к четному числу 1, к нечетному – 2. Сколько
существует таких программ, которые исходное число 3 преобразуют в число 25 и при этом траектория вычислений программы
содержит число 9 и число 17?
'''
##l = [0] * 100
##l[3] = 1
##for i in range(3, 10):
##    if i + 1 <= 9:
##        l[i+1] += l[i]
##    if i * 2 <= 9:
##        l[i*2] += l[i]
##    if not(i % 2):
##        if i + 1 <= 9:
##                l[i+1] += l[i]
##    else:
##        if i + 2 <= 9:
##            l[i+2] += l[i]
##for i in range(9, 18):
##    if i + 1 <= 17:
##        l[i+1] += l[i]
##    if i * 2 <= 17:
##        l[i*2] += l[i]
##    if not(i % 2):
##        if i + 1 <= 17:
##            l[i+1] += l[i]
##    else:
##        if i + 2 <= 17:
##            l[i+2] += l[i]
##for i in range(17, 26):
##    l[i+1] += l[i]
##    l[i*2] += l[i]
##    if not(i % 2):
##        l[i+1] += l[i]
##    else:
##        l[i+2] += l[i]
##print(l[25])

'''
3. Исполнитель Калькулятор преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:
1. Прибавить 1
2. Умножить на 2
Программа для исполнителя Калькулятор – это последовательность команд. Сколько существует программ, для которых при
исходном числе 1 результатом является число 21 и при этом траектория вычислений не содержит число 10?
'''
##l = [0] * 100
##l[1] = 1
##for i in range(1, 22):
##    l[10] = 0
##    l[i+1] += l[i]
##    l[i*2] += l[i]
##print(l[21])

'''
4. (С.С. Поляков) У исполнителя Калькулятор есть три команды, которым присвоены номера:
1. Прибавить 1
2. Прибавить 5
3. Умножить на 3
Сколько разных чисел может быть получено из числа 1 с помощью программ, состоящих из 7 команд?
'''
### №1
##l = [1] # создаем значение пустой программы
##i = 0 
##while i != 7: # перебираем до i-того значения
##    n = len(l) 
##    for j in range(n): # перебираем все значения массива со значениями
##        x = l.pop(0) # удаляем просматриваемое значение и сохраняем в x
##        l += [x+1, x+5, x*3] # записываем новые значения
##    i += 1 
##print(len(set(l))) # вывод уникальных значений
##
### №2
##s = set() # создаем множество s
##def f(x, n):
##    if n == 7: # проходимся до n-ого значения
##        s.add(x) # добавляем число ответа
##        return 0
##    f(x+1, n+1) # переходим на следущий шаг
##    f(x+5, n+1)
##    f(x*3, n+1)
##f(1, 0)
##print(len(s))

'''
8. (А. Комков) Исполнитель Нолик преобразует двоичное число, записанное на экране. У исполнителя есть две команды,
которым присвоены номера:
1. Вычесть 1
2. Обнулить
Первая команда уменьшает число на 1. Вторая команда обнуляет все ненулевые разряды, кроме старшего (например, для
исходного числа 11101 результатом работы команды будет число 10000), если таких разрядов нет, то данная команда не
выполняется. Сколько существует программ, которые исходное двоичное число 1100 преобразуют в двоичное число 100?
'''
##def f(n):
##    s = bin(n)[3::]
##    s = '1' + '0' * len(s)
##    return int(s, 2)
##
##
##l = [0] * 100
##l[int('1100', 2)] = 1
##for i in range(int('1100', 2), int('100', 2), -1):
##    l[i-1] += l[i]
##    r = f(i)
##    if r != i:
##        l[r] += l[i]
##print(l[int('100', 2)])

'''
10. Исполнитель Калькулятор преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:
1. Прибавить 1
2. Прибавить 3
Программа для исполнителя Калькулятор – это последовательность команд. Сколько существует программ, 
для которых при исходном числе 2 результатом является число 20, 
и при этом траектория вычислений содержит число 10 и не содержит число 15?
'''
##def f(x, n):
##    if x > n or x == 15: 
##        return 0
##    if x == n:
##        return 1
##    return f(x+1, n) + f(x+3, n)
##
##
##print(f(2, 10)*f(10, 20))

'''
16. (Б. Михлин) Исполнитель К22 преобразует число, записанное на экране. У исполнителя есть три команды, которым
присвоены номера:
1. Прибавь 1
2. Прибавь 4
3. Прибавь следующее чётное
Первая из них увеличивает число на экране на 1, вторая увеличивает число на 4. Третья команда прибавляет к числу
следующее четное число (например, число 2 увеличивает на 4, а число 5 увеличивает на 6).
Сколько существует программ, которые число 2 преобразуют в число 26, при этом траектория вычислений проходит через
число 11 и не проходит через число 21?
'''
# def f(x, n):
#     if x > n or x == 21:
#         return 0
#     if x == n:
#         return 1
#     return f(x + 1, n) + f(x + 4, n) + f(x + (x // 2 * 2 + 2), n)
#
#
# print(f(2, 11) * f(11, 26))


'''
20. (А. Комков) Исполнитель Нолик преобразует двоичное число, записанное на экране. У исполнителя есть две команды,
которым присвоены номера:
1. Вычесть 1
2. Убрать последнюю цифру справаПервая команда уменьшает число на 1. Вторая команда убирает последнюю справа цифру, 
например, для числа 110 результатом работы данной команды будет являться число 11.
'''
##l = [0] * 100
##l[int('110111', 2)] = 1
##for i in range(int('110111', 2), int('110', 2), -1):
##    l[i-1] += l[i]
##    l[i//2] += l[i]
##print(l[int('110', 2)])
