from time import time
from pprint import pprint

start = time()
def timecomplete() -> None:
    print('\nThe program was completed in {} second!'.format(time() - start))
    return None


'''
1. (В.Н. Шубинкин) Текстовый файл 24.txt состоит не более чем из 106 символов - заглавных
латинских букв и цифр. Возрастающей подпоследовательностью будем называть непрерывную
последовательность символов, расположенных в порядке увеличения их номера в кодовой таблице
символов ASCII. Найдите наибольшую возрастающую подпоследовательность в этом файле,
запишите в ответе сначала саму последовательность, а затем – её длину. Если таких
последовательностей несколько, используйте первую из них.
'''
##with open('data/24.txt') as f:
##    s = f.readline()
##tmp = s[0]
##res = ''
##for i in range(len(s) - 1):
##    if s[i] < s[i+1]:
##        tmp += s[i+1]
##    else:
##        if len(res) < len(tmp):
##            res = tmp
##        tmp = s[i+1]
##print(res, len(res))
##timecomplete()


'''
2. (А. Богданов) Текстовый файл 24-169.txt состоит не более чем из 106 символов X, Y и Z.
Определите максимальную длину цепочки символов, состоящей из повторяющихся фрагментов XYZ.
Цепочка может начинаться и заканчиваться любым символом из XYZ, но внутри цепочки порядок
строго определен. Например, для строки ZZZXYZXYZXZZZ длина цепочки равна 8:
Z+XYZ+XYZ+X, где цепочка начинается с Z и заканчивается X.
'''
##with open('data/24-169.txt') as f:
##    s = f.readline()
##s1 = 'XYZ'
##while s1 in s:
##    s1 += 'XYZ'
##s1 = s1[:-3]
##for x1 in ['', 'Z', 'YZ']:
##    for x2 in ['', 'X', 'XY']:
##        s2 = x1+s1+x2
##        if s2 in s:
##            res = s2
##print(len(res))
##timecomplete()


'''
3. Текстовый файл 24-s1.txt состоит не более чем из 106 символов и содержит только заглавные буквы
латинского алфавита (ABC…Z). Текст разбит на строки различной длины. Необходимо найти строку,
содержащую наименьшее количество букв A (если таких строк несколько, надо взять ту, которая в
файле встретилась раньше). Определите, какая буква встречается в этой строке чаще всего. Если
таких букв несколько, надо взять ту, которая стоит последней в алфавите. Запишите в ответе эту
букву, а затем – сколько раз она встречается во всем файле.
Пример. Исходный файл:
ZZQAQ
ZAVLAB
KRAKTU
В этом примере в первой и третьей строках по одной букве A, во второй – две. Берём первую строку,
т.к. она находится в файле раньше. В этой строке чаще других встречаются буквы Z и Q (по два раза),
выбираем букву Z, т. к. она позже стоит в алфавите. В ответе для этого примера надо записать Z3, так
как во всех строках файла буква Z встречается 3 раза.
'''
##slovar = {}
##with open('data/24-s1.txt') as f:
##    data = f.readlines()
##
##ca = 10**6
##for s in data:
##    s = s.strip()
##    if s.count('A') < ca:
##        ca = s.count('A')
##        slovar = {}
##        for i in s:
##            slovar[i] = s.count(i)
##            if set(slovar) == set(s):
##                break
##pprint(slovar)
##print(''.join(data).count('V'))
##timecomplete()


'''
4. (В.Н. Шубинкин) Текстовый файл 24-3.txt содержит последовательность из строчных и заглавных
букв английского алфавита и цифр, всего не более 106 символов. Возрастающей
подпоследовательностью будем называть непрерывную последовательность символов,
расположенных в порядке увеличения их номера в кодовой таблице символов ASCII. Запишите в
ответе номер символа, с которого начинается наибольшая возрастающая подпоследовательность.
Если таких последовательностей несколько, используйте первую из них. Нумерация символов
начинается с 1.
'''
with open('data/24-3.txt') as f:
    s = f.readline()
tmp = [[s[0], 0]]
res = [[s[0], 0]]
for i in range(len(s) - 1):
    if s[i] < s[i+1]:
        tmp.append([s[i+1], i+1])
    else:
        if len(res) < len(tmp):
            res = tmp.copy()
        tmp = [[s[i+1], i+1]]
print(res[0][1]+1)
timecomplete()
