'''
1 (В.Н. Шубинкин) Текстовый файл 24.txt состоит не более чем из 106 символов - заглавных латинских букв и
цифр. Убывающей подпоследовательностью будем называть непрерывную последовательность символов,
расположенных в порядке уменьшения их номера в кодовой таблице символов ASCII. Найдите наибольшую
убывающую подпоследовательность в этом файле, запишите в ответе сначала саму последовательность, а
затем – её длину. Если таких последовательностей несколько, используйте первую из них.
'''
### TODO: Ответ – ZYX 3
##with open('data/24.txt') as f:
##    s = f.readline().strip()
##ordlast = 10**10
##res = ''
##tmp = ''
##for l in s:
##    if ord(l) < ordlast:
##        tmp += l
##        res = max(tmp, res, key=len)
##    else:
##        tmp = l
##    ordlast = ord(l)
##print(res, len(res))


'''
2 Текстовый файл 24-157.txt состоит не более чем из 106 символов и содержит только заглавные буквы
латинского алфавита (ABC…Z). Определите символ, который чаще всего встречается в файле перед двумя
одинаковыми символами. Например, в тексте CCBAABABBCCC есть комбинации BAA, ABB, BCC и CCC.
Чаще всего – 2 раза – перед двумя одинаковыми символами стоит B, в ответе для этого случая надо написать
B2 (без пробелов и других разделителей). Если таких символов несколько, выведите тот, который стоит раньше
в алфавите.
'''
### TODO: Ответ –
##with open('data/24-157.txt') as f:
##    s = f.readline().strip()
##res = {chr(i): 0 for i in range(65, 91)}
##for i in range(len(s) - 2):
##    th = s[i:i+3]
##    if th[-1] == th[-2]:
##        res[th[0]] += 1
##res = res.items()
##mx = max(i[1] for i in res)
##print(''.join(map(str, min(list(filter(lambda x: x[1] == mx, res)), key=lambda x: len(x[0])))))


'''
3 (К. Багдасарян) Назовём маской числа последовательность цифр, в которой также могут встречаться
следующие символы:
- символ «?» означает ровно одну произвольную цифру;
- символ «Р» означает произвольное простое число;
Например, маске ?1P2 соответствуют числа 11132, 210132, 810032 и т.д.
Среди натуральных чисел, не превышающих 107, найдите все числа, соответствующие маске 9P?, делящиеся на
9998 без остатка. В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания, а
во втором столбце – соответствующие им результаты деления этих чисел на 9998.
'''
def is_prime(n):
    if n < 2:
        return False
    i = 2
    while i**2 <= n:
        if n % i == 0:
            return False
        i += 1
    return True

res = []
P = ['0' * j + str(i) for j in range(7) for i in range(100000) if is_prime(i)]
for p in P:
    for i in range(10):
        msk = int('9' + p + str(i))
        if msk >= 10**7:
            continue
        if msk % 9998 == 0:
            res.append((msk, msk // 9998))
res.sort(key=lambda x: x[0])
print(*res, sep='\n')

