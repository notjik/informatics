from functools import lru_cache

def tobase(n: int, b: int) -> str:
    alpha = '0123456789abcdefghijklmnopqrstuvwxyz'
    r = alpha[n%b]
    while n >= b:
        n //= b
        r += alpha[n%b]
    return r[::-1]
        


'''
1. Исполнитель Редактор получает на вход строку цифр и преобразовывает её.
Редактор может выполнять две команды, в обеих командах v и w обозначают цепочки
символов.
1. заменить (v, w) 
2. нашлось (v)
Первая команда заменяет в строке первое слева вхождение цепочки v на цепочку w.
Если цепочки v в строке нет, эта команда не изменяет строку. Вторая команда
проверяет, встречается ли цепочка v в строке исполнителя Редактор.
К исходной строке, содержащей более 50 единиц и не содержащей других символов,
применили приведённую ниже программу.
НАЧАЛО
ПОКА нашлось (111)
  заменить (111, 2)
  заменить (222, 1)
КОНЕЦ ПОКА
КОНЕЦ
В результате получилась строка 22. Какое наименьшее количество единиц могло
быть в исходной строке?
'''
##for i in range(50, 100):
##    s = '1'*i
##    while '111' in s:
##        s = s.replace('111', '2', 1)
##        s = s.replace('222', '1', 1)
##    if s == '22':
##        print('{}: {}'.format(i, s))
##        break


'''
3. Исполнитель Редактор получает на вход строку цифр и преобразовывает её.
Редактор может выполнять две команды, в обеих командах v и w обозначают цепочки
цифр.
1. заменить (v, w)
2. нашлось (v)
Первая команда заменяет в строке первое слева вхождение цепочки v на цепочку w,
вторая проверяет, встречается ли цепочка v в строке исполнителя Редактор. Если
она встречается, то команда возвращает логическое значение «истина», в
противном случае возвращает значение «ложь». Дана программа для исполнителя
Редактор:
НАЧАЛО
  ПОКА нашлось (>1) ИЛИ нашлось (>2) ИЛИ нашлось (>3)
    ЕСЛИ нашлось (>1)
      ТО заменить (>1, 22>)
    КОНЕЦ ЕСЛИ
    ЕСЛИ нашлось (>2)
      ТО заменить (>2, 2>1)
    КОНЕЦ ЕСЛИ
    ЕСЛИ нашлось (>3)
      ТО заменить (>3, 1>2)
    КОНЕЦ ЕСЛИ
  КОНЕЦ ПОКА
КОНЕЦ
На вход приведённой ниже программе поступает строка, начинающаяся с символа «>»,
а затем содержащая 20 цифр 1, 15 цифр 2 и 40 цифр 3, расположенных в
произвольном порядке. Определите сумму числовых значений цифр строки,
получившейся в результате выполнения программы. Так, например, если результат
работы программы представлял бы собой строку, состоящую из 50 цифр 4, то верным
ответом было бы число 200.
'''
##s = '>'+'1'*20+'2'*15+'3'*40
##while '>1' in s or '>2' in s or '>3' in s:
##    if '>1' in s:
##        s = s.replace('>1', '22>', 1)
##    if '>2' in s:
##        s = s.replace('>2', '2>1', 1)
##    if '>3' in s:
##        s = s.replace('>3', '1>2', 1)
##print(sum(map(int, s[:-1])))


'''
4. (П.М. Волгин) Значение арифметического выражения 2562 + 409616 – 15
записали в системе счисления с основанием 16. В этой записи помимо цифр
от 0 до 9 могут встречаться цифры из списка: А, B, С, D, E, F, которые имеют
числовые значения от 10 до 15 соответственно. Сколько цифр F встречается в этой
записи?
'''
##print(hex((256**2)+(4096**16)-15)[2:].count('f'))


'''
5. (П.М. Волгин)Значение арифметического выражения 15 + 210 + 16 записали в
системе счисления с основанием 16. В этой записи помимо цифр от 0 до 9 могут
встречаться цифры из списка: А, B, С, D, E, F, которые имеют числовые значения
от 10 до 15 соответственно. Сколько цифр F встречается в этой записи?
'''
##print(hex(15 + (2**10) + 16)[2:].count('f'))


'''
6. (Е. Джобс) Значение выражения 3∙51984 – 7∙25777 – 11∙125666 – 404 записали в
системе счисления с основанием 5. Сколько цифр 2 в такой записи?
'''
##n = 3*(5**1984) - 7*(25**777) - 11*(125**666) - 404
##print(tobase(abs(n), 5).count('2'))

'''
8. (Е. Джобс) Для какого наименьшего целого неотрицательного числа А выражение
(5x – 6y < A) ∨ (x – y > 30)
тождественно истинно, т.е. принимает значение 1 при любых целых неотрицательных
x и y?
'''
##for a in range(1, 1000):
##    flag = True
##    for x in range(1000):
##        for y in range(1000):
##            f = (5*x - 6*y < a) or (x - y > 30)
##            if not f:
##                flag = False
##                break
##        if not flag:
##            break
##    if flag:
##        print(a)


'''
10. (А. Куканова) Алгоритм вычисления значения функции F(n),
где n – натуральное число, задан следующими соотношениями:
F(n) = 1, если n = 1
F(n) = (3·n + 5)·F(n – 1), если n > 1.
Чему равно значение выражения F(2073) / F(2070)
'''
##@lru_cache(None)
##def f(n):
##    if n == 1:
##        return 1
##    return (3*n + 5) * f(n - 1)
##
##for i in range(1, 2100):
##    f(i)
##
##print(f(2073)/f(2070))


'''
11. Алгоритм вычисления значения функции F(n), где n – целое неотрицательное
число, задан следующими соотношениями:
F(n) = 0 при n = 0
F(n) = F(n/2) - 1 при чётных n > 0
F(n) = 3 + F(n–1) при нечётных n > 0
Сколько различных значений может принимать функция F(n) для чисел n, меньших
1000?
'''
##@lru_cache(None)
##def f(n):
##    if n == 0:
##        return 0
##    if not(n % 2):
##        return f(n//2) - 1
##    return 3 + f(n-1)
##
##r = set()
##for i in range(1000):
##    r.add(f(i))
##print(len(r))


'''
12. Определите, сколько символов * выведет эта процедура при вызове F(40):
'''
##c = 0
##def f(n):
##    global c
##    c += 1
##    if n >= 1:
##        c += 1
##        f(n-1)
##        f(n-3)
##        c += 1
##
##f(40)
##print(c)


'''
13. (А. Кабанов) В файле 17-257.txt содержится последовательность целых чисел.
Элементы последовательности могут принимать целые положительные значения
до 10 000 включительно. Необходимо найти сумму минимального и максимального
числа среди оканчивающихся на 4 элементов последовательности. Затем программа
должна найти и вывести количество пар элементов последовательности, сумма
которых меньше найденной суммы, а также наибольшую из этих сумм. В данной
задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
##with open('data/17-257.txt') as f:
##    data = list(map(int, f.readlines()))
##mx4 = max(filter(lambda x: x % 10 == 4, data))
##mn4 = min(filter(lambda x: x % 10 == 4, data))
##sm = mx4 + mn4
##c = 0
##mx = 0
##for i in range(len(data)-1):
##    if data[i] + data[i+1] < sm:
##        c += 1
##        mx = max(mx, data[i] + data[i+1])
##print(c, mx)


'''
14. В файле 17-243.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от 0 до 10 000 включительно.
Определите количество пар чисел, в которых хотя бы один из двух элементов
больше, чем наибольшее из всех чисел в файле, делящихся на 173, и в троичной
записи хотя бы одного элемента из двух содержится сочетание цифр 22. В ответе
запишите два числа: сначала количество найденных пар, а затем – минимальную
сумму элементов таких пар. В данной задаче под парой подразумевается два идущих
подряд элемента последовательности.
'''
##with open('data/17-243.txt') as f:
##    data = list(map(int, f.readlines()))
##mx173 = max(filter(lambda x: not(x % 173), data))
##c = 0
##mn = 10**6
##for i in range(len(data)-1):
##    if (data[i] > mx173 or data[i+1] > mx173) and \
##       ('22' in tobase(data[i], 3) or ('22' in tobase(data[i+1], 3))):
##        c += 1
##        mn = min(mn, data[i] + data[i+1])
##print(c, mn)


'''
15. В файле 17-243.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от 0 до 10 000 включительно.
Определите количество пар чисел, в которых хотя бы один из двух элементов
больше, чем наибольшее из всех чисел в файле, делящихся на 107, и в семеричной
записи хотя бы одного элемента из двух содержится сочетание цифр 36. В ответе
запишите два числа: сначала количество найденных пар, а затем – минимальную
сумму элементов таких пар. В данной задаче под парой подразумевается два идущих
подряд элемента последовательности.
'''
with open('data/17-243.txt') as f:
    data = list(map(int, f.readlines()))
mx107 = max(filter(lambda x: not(x % 107), data))
c = 0
mn = 10**6
for i in range(len(data)-1):
    if (data[i] > mx107 or data[i+1] > mx107) and \
       ('36' in tobase(data[i], 7) or ('36' in tobase(data[i+1], 7))):
        c += 1
        mn = min(mn, data[i] + data[i+1])
print(c, mn)
