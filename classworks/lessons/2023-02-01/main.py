from csv import reader

"""
1. В файле 17-243.txt содержится последовательность целых чисел. Элементы последовательности
могут принимать целые значения от 0 до 10 000 включительно. Определите количество пар чисел, в
которых ровно один из двух элементов больше, чем сумма цифр всех чисел в файле, делящихся на 35,
а шестнадцатеричная запись другого оканчивается на EF. В ответе запишите два числа: сначала
количество найденных пар, а затем – минимальную сумму элементов таких пар. В данной задаче под
парой подразумевается два идущих подряд элемента последовательности.
"""
### TODO: Ответ – 15 6410
##with open('data/17-243.txt') as f:
##    data = list(map(int, f.readlines()))
##sc35 = sum(map(int, ''.join([str(i) for i in data if not(i % 35)])))
##c = 0
##mn = 10**10
##for i in range(len(data) - 1):
##    if hex(data[i])[-2:] != 'ef' and data[i] > sc35 and data[i+1] < sc35 and hex(data[i+1])[-2:] == 'ef' or \
##       hex(data[i+1])[-2:] != 'ef' and data[i+1] > sc35 and data[i] < sc35 and hex(data[i])[-2:] == 'ef':
##        c += 1
##        mn = min(mn, sum(data[i:i+2]))
##print(c, mn)


"""
2. (А. Кабанов) В файле 17-4.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от 0 до 10 000 включительно. Рассматривается
множество элементов последовательности, которые в пятеричной системе счисления оканчиваются на
3, в девятеричной – на 5 и не оканчиваются на 7 в восьмеричной системе счисления. В качестве
ответа укажите два числа – количество найденных чисел и максимальное из них.
"""
### TODO: Ответ – 43 9653
##with open('data/17-4.txt') as f:
##    data = list(map(int, f.readlines()))
##c = 0
##mx = 0
##for i in data:
##    if i % 5 == 3 and i % 9 == 5 and i % 8 != 7:
##        c += 1
##        mx = max(mx, i)
##print(c, mx)


"""
3. В файле 17-243.txt содержится последовательность целых чисел. Элементы последовательности
могут принимать целые значения от 0 до 10 000 включительно. Определите количество пар чисел, в
которых хотя бы один из двух элементов больше, чем наибольшее из всех чисел в файле, делящихся
на 211, и хотя бы один элемент из двух содержит цифру 1. В ответе запишите два числа: сначала
количество найденных пар, а затем – минимальную сумму элементов таких пар. В данной задаче под
парой подразумевается два идущих подряд элемента последовательности
"""
### TODO: Ответ – 67 11071
##with open('data/17-243.txt') as f:
##    data = list(map(int, f.readlines()))
##leight = 2
##mx211 = max([i for i in data if not(i % 211)])
##c = 0
##mn = 10**10
##for i in range(len(data) - leight + 1):
##    if any((data[i+j] > mx211 for j in range(leight))) and \
##       any(('1' in str(data[i+j]) for j in range(leight))):
##        c += 1
##        mn = min(mn, sum(data[i:i+leight]))
##print(c, mn)


"""
4. (Демо-2023) В файле 22-0.xls содержится информация о совокупности N вычислительных
процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что
процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты
выполнения процесса A. В этом случае процессы могут выполняться только последовательно.
Информация о процессах представлена в файле в виде таблицы. В первом столбце таблицы указан
идентификатор процесса (ID), во втором столбце таблицы – время его выполнения в миллисекундах, в
третьем столбце перечислены с разделителем «;» ID процессов, от которых зависит данный процесс.
Если процесс является независимым, то в таблице указано значение 0.
Определите минимальное время, через которое завершится выполнение всей совокупности
процессов, при условии, что все независимые друг от друга процессы могут выполняться
параллельно.
Типовой пример организации данных в файле:
В данном случае независимые процессы 1 и 2
могут выполняться параллельно, при этом процесс 1 завершится через 4 мс, а процесс 2 – через 3 мс с
момента старта. Процесс 3 может начаться только после завершения обоих процессов 1 и 2, то есть,
через 4 мс после старта. Он длится 1 мс и закончится через 4 + 1 = 5 мс после старта. Выполнение
процесса 4 может начаться только после завершения процесса 3, то есть, через 5 мс. Он длится 7 мс,
так что минимальное время завершения всех процессов равно 5 + 7 = 12 мс.
"""
### TODO: Ответ – 17
##def calc(data, i):
##    if 0 not in data[i]['r']:
##        data[i]['t'] += max(calc(data, v) for v in data[i]['r'])
##        data[i]['r'] = [0]
##    return data[i]['t']
##
##with open('data/22-0.csv') as f:
##    rdr = [i for i in reader(f, delimiter=';', quotechar='"')]
##data = {}
##for c in rdr[1:]:
##    data[int(c[0])] = {'t': int(c[1]),
##                  'r': [int(x) for x in c[2].split(';')]}
##mx = 0
##for i in data:
##    f = calc(data, i)
##    mx = max(mx, f)
##print(mx)

    
"""
5. (Л. Евич) В файле 22-9e.xls содержится информация о совокупности N вычислительных процессов,
которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B
зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения
процесса A. В этом случае процессы могут выполняться только последовательно. Информация о
процессах представлена в файле в виде таблицы. В первом столбце таблицы указан идентификатор
процесса (ID), во втором столбце таблицы – время его выполнения в миллисекундах, в третьем
столбце перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если
процесс является независимым, то в таблице указано значение 0.
Определите минимальное время, через которое завершится выполнение всей совокупности
процессов, при условии, что все независимые друг от друга процессы могут выполняться
параллельно.
Типовой пример организации данных в файле:В данном случае независимые процессы 1 и 2
могут выполняться параллельно, при этом процесс 1 завершится через 4 мс, а процесс 2 – через 3 мс с
момента старта. Процесс 3 может начаться только после завершения обоих процессов 1 и 2, то есть,
через 4 мс после старта. Он длится 1 мс и закончится через 4 + 1 = 5 мс после старта. Выполнение
процесса 4 может начаться только после завершения процесса 3, то есть, через 5 мс. Он длится 7 мс,
так что минимальное время завершения всех процессов равно 5 + 7 = 12 мс.
"""
### TODO: Ответ – 51
##def calc(data, i):
##    if 0 not in data[i]['r']:
##        data[i]['t'] += max(calc(data, v) for v in data[i]['r'])
##        data[i]['r'] = [0]
##    return data[i]['t']
##
##with open('data/22-9e.csv') as f:
##    rdr = [i for i in reader(f, delimiter=';', quotechar='"')]
##data = {}
##for c in rdr[1:]:
##    data[int(c[0])] = {'t': int(c[1]),
##                  'r': [int(x) for x in c[2].split(';')]}
##mx = 0
##for i in data:
##    f = calc(data, i)
##    mx = max(mx, f)
##print(mx)


"""
6. (В. Шубинкин) В файле 22-3.xls содержится информация о совокупности N вычислительных
процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что
процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты
выполнения процесса A. В этом случае процессы могут выполняться только последовательно.
Информация о процессах представлена в файле в виде таблицы. В первом столбце таблицы указан
идентификатор процесса (ID), во втором столбце таблицы – время его выполнения в миллисекундах, в
третьем столбце перечислены с разделителем «;» ID процессов, от которых зависит данный процесс.
Если процесс является независимым, то в таблице указано значение 0.
Определите минимальное время, через которое завершится выполнение всей совокупности
процессов, при условии, что все независимые друг от друга процессы могут выполняться
параллельно.
Типовой пример организации данных в файле:
В данном случае независимые процессы 1 и 2
могут выполняться параллельно, при этом процесс 1 завершится через 4 мс, а процесс 2 – через 3 мс с
момента старта. Процесс 3 может начаться только после завершения обоих процессов 1 и 2, то есть,
через 4 мс после старта. Он длится 1 мс и закончится через 4 + 1 = 5 мс после старта. Выполнение
процесса 4 может начаться только после завершения процесса 3, то есть, через 5 мс. Он длится 7 мс,
так что минимальное время завершения всех процессов равно 5 + 7 = 12 мс.
"""
### TODO: Ответ – 36
##def calc(data, i):
##    if 0 not in data[i]['r']:
##        data[i]['t'] += max(calc(data, v) for v in data[i]['r'])
##        data[i]['r'] = [0]
##    return data[i]['t']
##
##with open('data/22-3.csv') as f:
##    rdr = [i for i in reader(f, delimiter=';', quotechar='"')]
##data = {}
##for c in rdr[1:]:
##    data[int(c[0])] = {'t': int(c[1]),
##                  'r': [int(x) for x in c[2].split(';')]}
##mx = 0
##for i in data:
##    f = calc(data, i)
##    mx = max(mx, f)
##print(mx)


"""
7. Исполнитель Калькулятор преобразует число на экране. У исполнителя есть две команды, которым
присвоены номера:
1. Прибавить 1
2. Умножить на 3
Программа для исполнителя Калькулятор – это последовательность команд. Сколько существует
программ, для которых при исходном числе 4 результатом является число 50 и при этом траектория
вычислений содержит число 6 и не содержит числа 12?
"""
### TODO: Ответ – 6
##def calc(x, end):
##    if x > end or x == 12:
##        return 0
##    if x == end:
##        return 1
##    return calc(x + 1, end) + calc(x * 3, end)
##
##print(calc(4, 6) * calc(6, 50))


"""
8. Исполнитель Калькулятор преобразует число на экране. У исполнителя есть две команды, которым
присвоены номера:
1. Прибавить 1
2. Умножить на 2
Программа для исполнителя Калькулятор – это последовательность команд. Сколько существует
программ, для которых при исходном числе 3 результатом является число 20, предпоследней
командой которых является команда «1»?
"""
### TODO: Ответ – 17
##def calc(x, end, log=[]):
##    if x > end:
##        return 0
##    if x == end:
##        if log[-2] == 1:
##            return 1
##        return 0
##    return calc(x + 1, end, log=log + [1]) + calc(x * 2, end, log=log + [2])
##
##print(calc(3, 20))


"""
9. (Е. Джобс) Исполнитель Вычислитель преобразует число на экране. У исполнителя есть две
команды, которым присвоены номера:
1. Прибавить 3
2. Умножить на 2
Первая команда увеличивает число на экране на 3, вторая – увеличивает значение в два раза. Сколько
существует программ, для которых при исходном числе 12 результатом является число 96?
"""
### TODO: Ответ – 40
##def calc(x, end):
##    if x > end:
##        return 0
##    if x == end:
##        return 1
##    return calc(x + 3, end) + calc(x * 2, end)
##
##print(calc(12, 96))


"""
10. (А. Богданов) Текстовый файл 24-221.txt содержит строку из десятичных цифр, всего не более чем
106 символов. Определите наибольшую длину подпоследовательности вида «цепочка нулей + цепочка
единиц». Рассматриваются только непрерывные подпоследовательности, в которых есть хотя бы один
ноль и хотя бы одна единица.
"""
### TODO: Ответ – 58
with open('data/24-221.txt') as f:
    s = f.readline()
s1 = '01'
while s1 in s:
    s1 = '0' + s1 + '1'
s1 = s1[1:-1] 
while '0' + s1 in s:
    s1 = '0' + s1
while s1 + '1' in s:
    s1 += '1'
print(len(s1))
