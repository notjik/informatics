def to_base(n, b):
    a = '0123456789abcdefghijklmnopqrstuvwxyz'
    r = a[n % b]
    while n >= b:
        n //= b
        r += a[n % b]
    return r[::-1]


"""
1. Исполнитель Редактор получает на вход строку цифр и преобразовывает её. Редактор может выполнять две команды, в обеих командах v и w обозначают цепочки цифр.
1. заменить (v, w)
2. нашлось (v)
Первая команда заменяет в строке первое слева вхождение цепочки v на цепочку w, вторая проверяет, встречается ли цепочка v в строке исполнителя Редактор. Если она встречается, то команда возвращает логическое значение «истина», в противном случае возвращает значение «ложь». Дана программа для исполнителя Редактор:
НАЧАЛО
  ПОКА нашлось(21)
    заменить (21, 6)
  КОНЕЦ ПОКА
КОНЕЦ
Исходная строка содержит десять единиц и некоторое количество двоек, других цифр нет, точный порядок расположения единиц и двоек неизвестен. После выполнения программы получилась строка с суммой цифр 50. Какое наименьшее количество двоек могло быть в исходной строке?
"""
### TODO: Ответ – 4


"""
2. (А.А. Имаев) Исполнитель Редактор получает на вход строку цифр и преобразовывает её. Редактор может выполнять две команды, в обеих командах v и w обозначают цепочки символов.
1. заменить (v, w) 
2. нашлось (v)
Первая команда заменяет в строке первое слева вхождение цепочки v на цепочку w. Если цепочки v в строке нет, эта команда не изменяет строку. Вторая команда проверяет, встречается ли цепочка v в строке исполнителя Редактор.
Дана программа для исполнителя Редактор:
НАЧАЛО
ПОКА нашлось (78) ИЛИ нашлось (7)
  ЕСЛИ нашлось (788)
    ТО заменить (78, 8887)
    ИНАЧЕ заменить (7,8888)
  КОНЕЦ ЕСЛИ
КОНЕЦ ПОКА
КОНЕЦ
Какая строка получится в результате применения приведённой ниже программы
к строке, состоящей одной цифры 7 и 55 стоящих справа от неё цифр 8? В ответ,
запишите, сколько цифр 8 будет в конечной строке.
"""
### TODO: Ответ – 167
##s = '7' + '8' * 55
##while '78' in s or '7' in s:
##    if '788' in s:
##        s = s.replace('78', '8887', 1)
##    else:
##        s = s.replace('7', '8888', 1)
##print(s.count('8'))


"""
3. Исполнитель Редактор получает на вход строку цифр и преобразовывает её. Редактор может выполнять две команды, в обеих командах v и w обозначают цепочки цифр.
1. заменить (v, w)
2. нашлось (v)
Первая команда заменяет в строке первое слева вхождение цепочки v на цепочку w. Если цепочки v в строке нет, эта команда не изменяет строку. Вторая команда проверяет, встречается ли цепочка v в строке исполнителя Редактор. Если она встречается, то команда возвращает логическое значение «истина», в противном случае возвращает значение «ложь». Дана программа для исполнителя Редактор:
НАЧАЛО
  ПОКА нашлось (56) ИЛИ нашлось (3333)
    заменить (56, 3)
    заменить (3333, 3)
  КОНЕЦ ПОКА
КОНЕЦ
Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из 121 строки 563 (563563563…563)?
"""
### TODO: Ответ – 33
##s = '563' * 121
##while '56' in s or '3333' in s:
##    s = s.replace('56', '3', 1)
##    s = s.replace('3333', '3', 1)
##print(s)


"""
4. Значение выражения 12•7135 + 11•792 – 63•722 + 17•711 + 157 записали в системе счисления с основанием 7. Сколько различных цифр содержится в этой записи?
"""
### TODO: Ответ – 6
##print(len(set(to_base(12*7**135 + 11*7**92 - 63*7**22 + 17*7**11 + 157, 7))))


"""
5. (П. Волгин) ) Значение выражения 1981 + 23709 – 4 записали в системе счисления с основанием 9. Определите количество комбинаций цифр 8# в этой записи, где # – любая цифра от 1 до 7.
"""
### TODO: Ответ – 76
##n = to_base(19**81 + 23**709 - 4, 9)
##c = 0
##for i in range(len(n) - 1):
##    if n[i] == '8' and n[i+1] in '1234567':
##        c += 1
##print(c)


"""
6. Сколько единиц в двоичной записи числа
  42016  + 22018 – 8600 + 6
"""
### TODO: Ответ – 221
##print(bin(4**2016  + 2**2018 - 8**600 + 6)[2:].count('1'))


"""
7. Укажите наименьшее целое значение А, при котором выражение
( – y + 2x < A) ∨ (x > 15) ∨ (y > 28)

истинно для любых целых положительных значений x и y.
"""
### TODO: Ответ – 30
##for a in range(1000):
##    flag = True
##    for x in range(1, 1000):
##        for y in range(1, 1000):
##            f = (-y + 2*x < a) or (x > 15) or (y > 28)
##            if not f:
##                flag = False
##                break
##        if not flag:
##            break
##    if flag:
##        print(a)
##        break


"""
8. (А. Богданов) Для какого наибольшего целого неотрицательного числа А выражение
(2y + x ≠ 70) ∨ (x < y) ∨ (A < x)

тождественно истинно, т.е. принимает значение 1 при любых целых неотрицательных x и y?
"""
### TODO: Ответ – 23
##for a in range(1000):
##    flag = True
##    for x in range(1000):
##        for y in range(1000):
##            f = (2*y + x != 70) or (x < y) or (a < x)
##            if not f:
##                flag = False
##                break
##        if not flag:
##            break
##    if flag:
##        print(a)


"""
9. Обозначим через ДЕЛ(n, m) утверждение «натуральное число n делится без остатка на натуральное число m». Для какого наименьшего натурального числа А формула
ДЕЛ(x,А) → (¬ДЕЛ(x,21) ∨ ДЕЛ(x,35))

тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной х)?
"""
### TODO: Ответ – 5
##for a in range(1, 1000):
##    flag = True
##    for x in range(1, 1000):
##        f = x % a != 0 or (x % 21 != 0 or x % 35 == 0)
##        if not f:
##            flag = False
##            break
##    if flag:
##        print(a)
##        break


"""
10. Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
F(n) = 2*n*n*n + n*n, при n > 25
F(n) = F(n+2) + 2*F(n+3), при n ≤ 25
Определите сумму цифр значения F(2).
"""
### TODO: Ответ – 33
##def F(n):
##    return 2*n*n*n + n*n if n > 25 else F(n+2) + 2*F(n+3)
##
##
##print(sum(map(int, str(F(2)))))


"""
11. Определите наименьшее значение n, при котором сумма чисел, которые будут выведены при вызове F(n), будет больше 1000000. Запишите в ответе сначала найденное значение n, а затем через пробел – соответствующую сумму выведенных чисел.
Паскаль	Python	C++
procedure F(n: integer);
begin
writeln(n+1);
if n > 1 then begin
writeln(2*n);
F(n-1);
F(n-3);
end;
end;
def F( n ):
print(n+1)
if n > 1:
print(2*n)
F(n-1)
F(n-3)
void F( int n )
{
cout << n+1 << endl;
if( n > 1 ) {
cout << 2*n << endl;
F(n-1);
F(n-3);
}
}
"""
### TODO: Ответ – 30
##def F( n ):
##    global res
##    res += n+1
##    if n > 1:
##        res += 2*n
##        F(n-1)
##        F(n-3)
##
##for n in range(1, 1000):
##    res = 0
##    F(n)
##    if res > 1000000:
##        print(n)
##        break


"""
12. (Д.Ф. Муфаззалов) Определите количество различных натуральных значений n таких, что значение F(n, 2) находится в диапазоне [100; 1000].
Паскаль	Python	C++
function F(n, m:
integer): integer;
begin
if m = 0 then
F:= 1
else
F:= n*F(n,m-1)
end;
def F(n,m):
if m == 0:
d = 1
else:
d = n*F(n, m-1)
return d
int F(int n, int m)
{
if( m == 0 )
return 1;
else
return n*F(n, m-1);
}
"""
### TODO: Ответ – 901
##def F(n,m):
##    if m == 0:
##        d = 1
##    else:
##        d = n*F(n, m-1)
##    return d
##
##res = set()
##for n in range(100, 1001):
##    res.add(F(n, 2))
##print(len(res))


"""
13. (В. Шубинкин) В файле 17-1.txt содержится последовательность целых чисел. Элементы последовательности могут принимать целые значения от -10 000 до 10 000 включительно. Определите и запишите в ответе сначала количество элементов последовательности, которые больше предыдущего элемента, затем наименьший модуль разности чисел в паре среди всех таких пар. В данной задаче под парой подразумевается два идущих подряд элемента последовательности. Например, для последовательности 307; 36; 45; -27; -11; -6; 2; -16 ответом будет пара чисел: 4 и 5.
"""
### TODO: Ответ – 5012 8
##with open('data/17-1.txt') as f:
##    data = list(map(int, f.readlines()))
##c = 0
##mn = 10**10
##for i in range(len(data) - 1):
##    if data[i+1] > data[i]:
##        c += 1
##        mn = min(mn, abs(data[i] - data[i+1]))
##print(c, mn)


"""
14. (П. Финкель) В файле 17-199.txt содержится последовательность целых чисел, которые принимают значения от -10000 до 10000 включительно. Тройка идущих подряд чисел последовательности называется уникальной, если только второе из них является положительным трёхзначным нечётным числом. Определите количество уникальных троек чисел, а затем – максимальную из всех сумм таких троек.
"""
### TODO: Ответ – 97 18841
##with open('data/17-199.txt') as f:
##    data = list(map(int, f.readlines()))
##c = 0
##mx = -30000
##for i in range(len(data) - 2):
##    if (data[i] <= 0 or (data[i] < 100 or data[i] > 999) or data[i] % 2 == 0)\
##       and (data[i+1] > 0 and 100 <= data[i+1] <= 999 and data[i+1] % 2 != 0)\
##       and (data[i+2] > 0 or (data[i+2] < 100 or data[i+2] > 999) or data[i+2] % 2 == 0):
##        c += 1
##        mx = max(mx, sum(data[i:i+3]))
##print(c, mx)


"""
15. (А. Брейк) В файле 17-288.txt содержится последовательность целых чисел. Элементы последовательности могут принимать целые значения от -10 000 до 10 000 включительно. Запишите в ответе количество троек элементов последовательности, в которых семеричные записи всех чисел оканчиваются на разные цифры и хотя бы одно число отрицательно. Затем минимальную разность между максимальным и минимальным числами в таких тройках. В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
"""
### TODO: Ответ – 4653 145
with open('data/17-288.txt') as f:
    data = list(map(int, f.readlines()))
c = 0
mn = 30000
for i in range(len(data) - 2):
    if to_base(abs(data[i]), 7)[-1] != to_base(abs(data[i+1]), 7)[-1] \
       and to_base(abs(data[i+1]), 7)[-1] != to_base(abs(data[i+2]), 7)[-1]\
       and any((data[i] < 0, data[i + 1] < 0, data[i + 2] < 0)):
        c += 1
        mn = min(mn, max(data[i:i+3]) - min(data[i:i+3]))
print(c, mn)
