from itertools import product
from math import log, ceil


def to_base(x, base):
    alphabet = [chr(i) for i in range(ord('0'), ord('9') + 1)] + [chr(i) for i in range(ord('a'), ord('z') + 1)]
    res = alphabet[x % base]
    while x >= base:
        x //= base
        res += alphabet[x % base]
    return res[::-1]


"""
Задача 2
Алекс заполнил таблицу истинности логической функции F
(x || y) && !(y == z) && not w
Он успел заполнить лишь фрагмент из трех различных её строк, даже не указав, какому столбцу таблицы соответствует 
каждая переменная х, у, z, w. Определите, какому столбцу таблицы соответствует каждая из переменных х, у, z, w.
"""
### TODO: Ответ — wzyx
# print('w z y x f')
# for x, y, z, w in product(range(2), repeat=4):
#     f = int((x or y) and not (y == z) and not w)
#     if f:
#         print(w, z, y, x, f)


"""
Задача 5.1
На вход алгоритма подается натуральное число N. Алгоритм строит по нему новое число R следующим образом:
1) Строится троичная запись числа N
2) Если N кратно 3, то в конце троичной записи числа дописываются три последние цифры числа.
Иначе в конец троичной записи числа дописывается остаток от деления на 3
Полученная таким образом запись является троичной записью искомого числа
R. Укажите минимальное число N, после обработки которого автомат получается число, большее 150.
В ответе это число запишите в десятичной системе счисления.
"""
# # TODO: Ответ — 9
# for N in range(9, 1000):
#     R = to_base(N, 3)
#     R += R[-3:] if N % 3 == 0 else str(N % 3)
#     R = int(R, 3)
#     if R > 150:
#         print(N)
#         break


"""
Задача 5.2
На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом:
1. Строится троичная запись числа N
2.Далее эта запись обрабатывается по следующему правилу:
a) если число N делится на 3, то к этой записи дописываются две последние троичные цифры
б) если число N на 3 не делится, то остаток от деления умножается на 5, 
переводится в троичную запись и дописывается в конец числа
3. Результат переводится в десятичную систему и выводится на экран. 
Укажите минимальное число N, после обработки которого с помощью этого алгоритма, получается число R, не меньшее 146
"""
# # TODO: Ответ — 8
# for N in range(3, 1000):
#     R = to_base(N, 3)
#     R += R[-2:] if N % 3 == 0 else to_base((N % 3) * 5, 3)
#     R = int(R, 3)
#     if R >= 146:
#         print(N)
#         break

"""
Задача 7
Сколько секунд потребуется модему, передающему сообщения со скоростью
28800 бит/с, чтобы передать цветное растровое изображение размером
1280 × 720 пикселей, при условии, что цвет каждого пикселя кодируется
4 Байтами
"""
### TODO: Ответ — 1024
##print((1280*720*4*8)/28800)


"""
Задача 8
Игорь составляет таблицу кодовых слов для передачи сообщений,
каждому сообщению соответствует своё кодовое слово.
В качестве кодовых слов Игорь использует пятибуквенные слова,
в которых могут быть только буквы ПЯТНИЦА,
причём буква Я появляется ровно 1 раз.
Каждая из других допустимых букв может встречаться в кодовом слове любое
количество раз или не встречаться совсем. На первом месте НЕ может стоять
буква Н. Сколько различных кодовых слов может использовать
Игорь?
"""
# # TODO: Ответ — 5616
# c = 0
# for s in product('ПЯТНИЦА', repeat=5):
#     if s.count('Я') == 1 and s[0] != 'Н':
#         c += 1
# print(c)


"""
Тип 9 № 47213
Откройте файл электронной таблицы, содержащей в каждой строке шесть
натуральных чисел.
Задание 9
Определите количество строк таблицы, содержащих числа,
для которых выполнены оба условия:
— в строке только одно число повторяется ровно два раза,
остальные числа различны;
— среднее арифметическое неповторяющихся чисел строки не больше суммы
повторяющихся чисел.
В ответе запишите только число.
"""
# # TODO: Ответ — 2241
# c = 0
# with open('data/9.txt') as f:
#     data = list(map(lambda x: tuple(map(int, x.split())), f.readlines()))
# for row in data:
#     if len(set(row)) == 5:
#         replay_summ = (sum(row) - sum(set(row))) * 2
#         no_replay_avg = (sum(set(row)) - (replay_summ // 2)) / 4
#         if no_replay_avg <= replay_summ:
#             c += 1
# print(c)


"""
Задание 9
Задание выполняется с использованием прилагаемых файлов.
Откройте файл электронной таблицы, содержащей в каждой строке семь натуральных чисел. 
Определите количество строк таблицы, содержащих числа, для чисел которых выполнены оба условия:
- в строке есть одно число, которое повторяется трижды, остальные четыре числа различны
- среднее арифметическое неповторяющихся чисел строки не больше повторяющегося числа. 
В ответе запишите только число.
"""
# # TODO: Ответ — 36
# with open('data/9.2.txt') as f:
#     data = list(map(lambda x: tuple(map(int, x.split())), f.readlines()))
# avg = lambda a: sum(a) / len(a)
# res = 0
# for row in data:
#     cols = [row.count(col) for col in row]
#     if cols.count(3) == 3 and cols.count(1) == 4 and \
#             avg([row[i] for i, elem in enumerate(cols) if elem == 1]) <= row[cols.index(3)]:
#         res += 1
# print(res)

"""
Задача 11
При регистрации в компьютерной системе каждому объекту присваивается иде-
тификатор, состоящий из 65 символов и содержащий только десятичные цифры и
символы из 2500-символьного специального алфавита. В базе данных для хран-
ния сведений о каждом идентификаторе отведено одинаковое и минимальное целое
число БАЙТ. При этом используется посимвольное кодирование идентификаторов.
все символы кодируются одинаковым и минимально возможным количеством бит
Определите объём памяти в Кбайт, необходимый для хранения сведений о 16384
объектах
"""
# # TODO: Ответ — 1568
# print((ceil((ceil(log(2500+10, 2))*65)/(2**3))*16384)/(2**10))


"""
Задание 14
Операнды арифметического выражения записаны в системе счисления с основанием 19.
В записи чисел переменной х обозначена неизвестная цифра из алфавита 19-ричной системы счисления. 
98x79641_19 + 36x14_19 + 73x4_19
Определите наибольшее значение х, при котором значение данного арифметического выражения кратно 18. 
Для найденного значения х вычислите частное от деления значения арифметического выражения на 19 и укажите его 
в ответе в десятичной системе счисления. Основание системы счисления указывать не нужно.
"""
### TODO: Ответ — 470402599
# for x in '0123456789abcdefghi':
#     exp = int('98x79641'.replace('x', x), 19) + int('36x14'.replace('x', x), 19) + int('73x4'.replace('x', x), 19)
#     if exp % 18 == 0:
#         print(exp // 18)


"""
Задание 17
Задание выполняется с использованием прилагаемых файлов.
B файле содержится последовательность натуральных чисел. 
Элементы последовательности могут принимать целые значения от 1 до 100 000 включительно. 
Определите количество троек последовательности, в которых только одно из чисел является четырёхзначным, 
a сумма элементов тройки не меньше максимального элемента последовательности, оканчивающегося на 15. 
B ответе запишите количество найденных троек, затем максимальную из сумм элементов таких троек. 
В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
"""
### TODO: Ответ — 36
with open('data/17.txt') as f:
    data = list(map(int, f.readlines()))
q = lambda x: 999 < x < 10000
mx15 = max(elem for elem in data if abs(elem % 100) == 15)
c = 0
mxs = 0
for i in range(len(data) - 2):
    access = 0
    for j in range(3):
        access += 1 if q(data[i + j]) else 0
    summ = sum(data[i:i+3])
    if access == 1 and summ >= mx15:
        c += 1
        mxs = max(mxs, summ)
print(c, mxs)


"""
Задание 23
Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:
A. Прибавить 2
B. Прибавить 3
C. Умножить на 2
Программа для исполнителя - это последовательность команд.
Сколько существует программ, для которых при исходном числе 3 результатом является число 25, и при этом траектория 
вычислений содержит число 10 и не содержит 17?
Траектория вычислений программы - это последовательность результатов выполнения всех команд программы. 
Например, для программы СВА при исходном числе 7 траектория состоит из чисел 14, 17, 19.
"""
### TODO: Ответ — 90
# def f(x, end):
#     if x == end:
#         return 1
#     if x > end or x == 17:
#         return 0
#     return f(x + 2, end) + f(x + 3, end) + f(x * 2, end)
#
#
# print(f(3, 10) * f(10, 25))


"""
24) № 8510 Апробация 17.05 (Уровень: Средний)
Текстовый файл состоит из символов, обозначающих прописные буквы латинского
алфавита.
Определите максимальное количество идущих подряд символов,
среди которых никакие две буквы из набора букв N, O и P (с учетом повторений)
не записаны подряд.
Для выполнения этого задания следует написать программу.
Файлы к заданию:24.txt
"""
### TODO: Ответ — 57
##with open('data/24_8510.txt') as f:
##    s = f.read()
##comb = [''.join(i) for i in product('NOP', repeat=2)]
##mx = 0
##tmp = ''
##for i in s:
##    tmp += i
##    if any(c in tmp for c in comb):
##        tmp = tmp[-1]
##    mx = max(mx, len(tmp))
##print(mx)


"""
25) № 7013 (Уровень: Средний)
Назовём маской числа последовательность цифр,
в которой также могут встречаться следующие символы:   
- символ «?» означает ровно одну произвольную цифру;
- символ «*» означает любую последовательность цифр произвольной длины;
в том числе «*» может задавать и пустую последовательность.
Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
Найдите все натуральные числа, не превосходящие 109, для которых выполнены
все условия:
- соответствуют маске *31*65?;
- делятся на 31 и 2031 без остатка;
- количество делителей числа является результатом любой степени двойки
В ответе запишите в первом столбце таблицы все найденные числа в порядке
возрастания, справа от каждого числа их частное от деления на 2031.
"""
### TODO: Ответ —
###  53831655 26505
###  333126651 164021
###  512313657 252247
###  647931651 319021
###  831966654 409634
##from fnmatch import fnmatch
##
##def c_dels(x):
##    res = 0
##    i = 1
##    while i**2 <= x:
##        if i**2 == x:
##            res += 1
##        elif x % i == 0:
##            res += 2
##        i += 1
##    return res
##
##def is_pow2(x):
##    while x % 1 == 0:
##        if x / 2 == 1:
##            return True
##        x /= 2
##    return False
##    
##
##for i in range(0, 10**9, 31*2031):
##    if fnmatch(str(i), '*31*65?') and is_pow2(c_dels(i)):
##        print(i, i // 2031)


"""	
26.1) № 4938 (Уровень: Сложный)
Бизнес-центру необходимо составить расписание мероприятий в конференц зале.
В каждый момент времени в зале может проводиться только одно мероприятие.
Организаторы мероприятий подали заявки, в которых указано время начала и
время окончания их мероприятий. Из данных заявок необходимо составить
расписание так, чтобы количество проводимых мероприятий было наибольшим.
При этом если одна заявка закончилась, а следующая началась в то же время,
то их можно ставить подряд.
Входные данные.
В первой строке входного файла находятся два числа через пробел:
число L - общая длительность работы зала (натуральное число не превышающее 109)
и число N - количество поданных заявок (натуральное число,
не превышающее 10 000). В следующих N строках находится по два числа через
пробел. Первое число - время начало мероприятия от начала работы зала
(натуральное число, не превышающее 109). Второе число - время окончания
(натуральное число, не превышающее 109).
Запишите в ответе два числа: наибольшее возможное количество мероприятий в
расписании, а также наименьшее возможное время начала последнего мероприятия.
Пример входного файла:
1000 7
50 200
0 300
200 450
500 550
550 700
700 800
750 900
При таких условиях расписание можно составить из мероприятий: 50-200; 200-450;
500-550; 550-700; 700-800. Поэтому ответ для приведённого примера 5 700.
Файлы к заданию:26.txt
"""
# # TODO: Ответ — 91 9881
# with open('data/26_4938.txt') as f:
#     L, N = map(int, f.readline().split())
#     data = list(map(lambda x: tuple(map(int, x.split())), f.readlines()))
# data.sort(key=lambda x: (x[1] - x[0], x[0]))
# time = [0] * (L + 1)
# res = []
# for i in range(N):
#     if all(time[t] != 2 for t in range(data[i][0], data[i][1] + 1)):
#         time[data[i][0]] = time[data[i][1]] = 1
#         for v in range(data[i][0] + 1, data[i][1]):
#             time[v] = 2
#         res.append(data[i])
# print(len(res), max(res)[0])


"""
Задание 26.2
Задание выполняется с использованием прилагаемых файлов.
Входной файл содержит сведения о заявках на проведение занятий в конференц-зале. 
В каждой заявке указаны время начала и время окончания мероприятия (в минутах от начала суток). 
Если время начала одного мероприятия меньше времени окончания другого, то провести можно только одно из них. 
Если время окончания одного мероприятия совпадает с временем начала другого, то провести можно оба. 
Определите максимальное количество мероприятий, которое можно провести в конференц-зале и самое позднее время 
окончания последнего мероприятия. Входные данные
В первой строке входного файла находится натуральное число N (N < 1000) - количество заявок на проведение мероприятий. 
Следующие N строк содержат пары чисел, обозначающих время начала и время окончания мероприятий. 
Каждое из чисел натуральное, не превосходящее 1440.
Запишите в ответе два числа: максимальное количество мероприятий, которое можно провести в конференц-зале и самое 
позднее время окончания последнего мероприятия (в минутах от начала суток).
Типовой пример организации данных во входном файле:
5
10 150
100 110
131 170
131 180
120 130
При таких исходных данных можно провести максимум три мероприятия, например, по заявкам 2, 3 и 5. 
Конференц-зал освободится самое позднее на 180-й минуте, если состоятся мероприятия по заявкам 2, 4, 5.
Типовой пример имеет иллюстративный характер. Для выполнения задания используйте данные из прилагаемых файлов.
"""
# # TODO: Ответ — 16 1028
# with open('data/26.txt') as f:
#     N = int(f.readline())
#     data = list(map(lambda x: tuple(map(int, x.split())), f.readlines()))
# data.sort(key=lambda x: (x[1] - x[0], x[0]))
# time = [0] * max(data, key=lambda x: x[1])[1]
# res = []
# for i in range(N):
#     if all(time[t] != 2 for t in range(data[i][0], data[i][1] + 1)):
#         time[data[i][0]] = time[data[i][1]] = 1
#         for v in range(data[i][0] + 1, data[i][1]):
#             time[v] = 2
#         res.append(data[i])
# print(len(res), max(res)[1])


"""
Задание 27
Задание выполняется с использованием прилагаемых файлов.
По каналу связи передаётся последовательность целых чисел- показания прибора. 
В течение N мин. (N - натуральное число) прибор ежеминутно регистрирует значение силы тока (в условных единицах) 
в электрической сети и передаёт его на сервер. Определите три таких переданных числа, чтобы между моментами передачи 
любых двух из них прошло не менее К мин., а сумма этих
чисел была минимально возможной. Запишите в ответе найденную сумму. Входные данные
Даны два входных файла (файл А и файл В), каждый из которых в первой строке содержит натуральное число К - минимальное 
количество минут, которое должно пройти между моментами передачами любых двух из трёх показаний, 
а во второй - количество переданных показаний N (1 N 10 000 000, N> K). В каждой из следующих N строк находится одно 
натуральное число, не превышающее 10 000 000, которое обозначает значение силы тока в соответствующую минуту.
Запишите в ответе два числа: сначала значение искомой величины
для файла А, затем - для файла В.
Типовой пример организации данных во входном файле
2
6
15
14
20
23
21
10
При таких исходных искомая величина равна 45 - это сумма значений, зафиксированных на первой, 
третьей и шестой минутах измерений.
Типовой пример имеет иллюстративный характер. Для выполнения задания используйте данные из прилагаемых файлов.
"""
# # TODO: Ответ — 166998 15102
# def solution_bad(K, N, data):
#     res = sum(data)
#     for i in range(N-2*K):
#         for j in range(i+K, N-K):
#             for k in range(j+K, N):
#                 res = min(res, data[i] + data[j] + data[k])
#     return res
#
# def solution(K, N, data):
#     step1 = step2 = res = sum(data)
#     for i in range(2 * K, N):
#         step1 = min(step1, data[i - 2 * K])
#         step2 = min(step2, step1 + data[i - K])
#         res = min(res, step2 + data[i])
#     return res
#
#
# with open('data/27_T.txt') as f:
#     K = int(f.readline())
#     N = int(f.readline())
#     data = list(map(int, f.readlines()))
# print('Bad: {}\nOptimal: {}\n\n'.format(solution_bad(K, N, data), solution(K, N, data)))
#
# with open('data/27_A.txt') as f:
#     K = int(f.readline())
#     N = int(f.readline())
#     data = list(map(int, f.readlines()))
# print('Bad: {}\nOptimal: {}\n\n'.format(solution_bad(K, N, data), solution(K, N, data)))
#
#
# with open('data/27_B.txt') as f:
#     K = int(f.readline())
#     N = int(f.readline())
#     data = list(map(int, f.readlines()))
# print('Optimal: {}'.format(solution(K, N, data)))
