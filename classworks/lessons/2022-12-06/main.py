from csv import reader

'''
1. (PRO100 ЕГЭ) В файле 22-26.xls содержится информация о совокупности N вычислительных
процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что
процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты
выполнения процесса A. В этом случае процессы могут выполняться только последовательно.
Информация о процессах представлена в файле в виде таблицы. В первом столбце таблицы указан
идентификатор процесса (ID), во втором столбце таблицы – время его выполнения в миллисекундах, в
третьем столбце перечислены с разделителем «;» ID процессов, от которых зависит данный процесс.
Если процесс является независимым, то в таблице указано значение 0.
Определите минимальное время, через которое завершится выполнение всей совокупности
процессов, при условии, что все независимые друг от друга процессы могут выполняться
параллельно.
Типовой пример организации данных в файле:
В данном случае независимые процессы 1 и 2
могут выполняться параллельно, при этом процесс 1 завершится через 4 мс, а процесс 2 – через 3 мс с
момента старта. Процесс 3 может начаться только после завершения обоих процессов 1 и 2, то есть,
через 4 мс после старта. Он длится 1 мс и закончится через 4 + 1 = 5 мс после старта. Выполнение
процесса 4 может начаться только после завершения процесса 3, то есть, через 5 мс. Он длится 7 мс,
так что минимальное время завершения всех процессов равно 5 + 7 = 12 мс.
'''
##def calc(d, i):
##    if '0' in d[i]['rel']:
##        return d[i]['time']
##    mx = 0
##    for j in d[i]['rel']:
##        f = calc(d, j)
##        mx = max(mx, f)
##    d[i]['rel'] = ['0']
##    d[i]['time'] += mx
##    return d[i]['time']
##
##with open('data/22-26.csv') as f:
##    rdr = [i for i in reader(f, delimiter=';', quotechar='"')]
##    d = {}
##    for i, t, r in rdr[1:]:
##        d[i] = {'time': int(t), 'rel': [j.strip() for j in r.split(';')]}
##
##mx = 0
##for i in d:
##    f = calc(d, i)
##    mx = max(mx, f)
##print(mx)


'''
2. (PRO100 ЕГЭ) В файле 22-30.xls содержится информация о совокупности N вычислительных
процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что
процесс B зависит от процесса A, если для выполнения процесса B требуется, чтобы был выполнен
хотя бы 50% от количества процессов А. Информация о процессах представлена в файле в виде
таблицы. В первом столбце таблицы указан идентификатор процесса (ID), во втором столбце таблицы
– время его выполнения в миллисекундах, в третьем столбце перечислены с разделителем «;» ID
процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице
указано значение 0.
Определите минимальное время, через которое завершится выполнение всей совокупности
процессов, при условии, что все независимые друг от друга процессы могут выполняться
параллельно.
Типовой пример организации данных в файле:
В данном случае независимые
процессы 1 и 2 могут выполняться параллельно, при этом процесс 1 завершится через 4 мс, а процесс
2 – через 3 мс с момента старта. Процесс 3 может начаться только после завершения хотя бы 50% из
двух процессов, то есть любого процесса 1 или 2, то есть, через 3 мс после старта. Он длится 1 мс и
закончится через 3 + 1 = 4 мс после старта.
Выполнение процесса 4 может начаться только после завершения хотя бы 50% из трёх процессов, то
есть любых двух из процессов (1, 2, 3), то есть, через 4 мс. Он длится 7 мс, так что минимальное
время завершения всех процессов равно 4 + 7 = 11 мс.
'''
##def calc(d, i):
##    if '0' in d[i]['rel']:
##        return d[i]['time']
##    a = []
##    for j in d[i]['rel']:
##        f = calc(d, j)
##        a.append(f)
##    a.sort()
##    if not(len(a) % 2):
##        mx = max(a[:len(a) // 2])
##    else:
##        mx = max(a[:len(a) // 2 + 1])
##    d[i]['rel'] = ['0']
##    d[i]['time'] += mx
##    return d[i]['time']
##
##with open('data/22-30.csv') as f:
##    rdr = [i for i in reader(f, delimiter=';', quotechar='"')]
##    d = {}
##    for i, t, r in rdr[1:]:
##        d[i] = {'time': int(t), 'rel': [j.strip() for j in r.split(';')]}
##
##mx = 0
##for i in d:
##    f = calc(d, i)
##    mx = max(mx, f)
##print(mx)


'''
3. (В. Шубинкин) В файле 22-2.xls содержится информация о совокупности N вычислительных
процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что
процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты
выполнения процесса A. В этом случае процессы могут выполняться только последовательно.
Информация о процессах представлена в файле в виде таблицы. В первом столбце таблицы указан
идентификатор процесса (ID), во втором столбце таблицы – время его выполнения в миллисекундах, втретьем столбце перечислены с разделителем «;» ID процессов, от которых зависит данный процесс.
Если процесс является независимым, то в таблице указано значение 0.
Определите минимальное время, через которое завершится выполнение всей совокупности
процессов, при условии, что все независимые друг от друга процессы могут выполняться
параллельно.
Типовой пример организации данных в файле:
В данном случае независимые процессы 1 и 2
могут выполняться параллельно, при этом процесс 1 завершится через 4 мс, а процесс 2 – через 3 мс с
момента старта. Процесс 3 может начаться только после завершения обоих процессов 1 и 2, то есть,
через 4 мс после старта. Он длится 1 мс и закончится через 4 + 1 = 5 мс после старта. Выполнение
процесса 4 может начаться только после завершения процесса 3, то есть, через 5 мс. Он длится 7 мс,
так что минимальное время завершения всех процессов равно 5 + 7 = 12 мс.
'''
##def calc(d, i):
##    if '0' in d[i]['rel']:
##        return d[i]['time']
##    mx = 0
##    for j in d[i]['rel']:
##        f = calc(d, j)
##        mx = max(mx, f)
##    d[i]['rel'] = ['0']
##    d[i]['time'] += mx
##    return d[i]['time']
##
##with open('data/22-2.csv') as f:
##    rdr = [i for i in reader(f, delimiter=';', quotechar='"')]
##    d = {}
##    for i, t, r, e in rdr[1:]:
##        d[i] = {'time': int(t), 'rel': [j.strip() for j in r.split(';')]}
##
##mx = 0
##for i in d:
##    f = calc(d, i)
##    mx = max(mx, f)
##print(mx)


'''
4. (Л. Евич) В файле 22-3e.xls содержится информация о совокупности N вычислительных процессов,
которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B
зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения
процесса A. В этом случае процессы могут выполняться только последовательно. Информация о
процессах представлена в файле в виде таблицы. В первом столбце таблицы указан идентификатор
процесса (ID), во втором столбце таблицы – время его выполнения в миллисекундах, в третьем
столбце перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если
процесс является независимым, то в таблице указано значение 0.
Определите минимальное время, через которое завершится выполнение всей совокупности
процессов, при условии, что все независимые друг от друга процессы могут выполняться
параллельно.
Типовой пример организации данных в файле:
В данном случае независимые процессы 1 и 2
могут выполняться параллельно, при этом процесс 1 завершится через 4 мс, а процесс 2 – через 3 мс с
момента старта. Процесс 3 может начаться только после завершения обоих процессов 1 и 2, то есть,
через 4 мс после старта. Он длится 1 мс и закончится через 4 + 1 = 5 мс после старта. Выполнение
процесса 4 может начаться только после завершения процесса 3, то есть, через 5 мс. Он длится 7 мс,
так что минимальное время завершения всех процессов равно 5 + 7 = 12 мс.
'''
##def calc(d, i):
##    if '0' in d[i]['rel']:
##        return d[i]['time']
##    mx = 0
##    for j in d[i]['rel']:
##        mx = max(mx, calc(d, j))
##    d[i]['rel'] = ['0']
##    d[i]['time'] += mx
##    return d[i]['time']
##
##with open('data/22-3e.csv') as f:
##    rdr = [i for i in reader(f, delimiter=';', quotechar='"')]
##    d = {}
##    for i, t, r, e in rdr[1:]:
##        d[i] = {'time': int(t), 'rel': [j.strip() for j in r.split(';')]}
##
##mx = 0
##for i in d:
##    mx = max(mx, calc(d, i))
##print(mx)


'''
5. (В. Шубинкин) В файле 22-4.xls содержится информация о совокупности N вычислительных
процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что
процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты
выполнения процесса A. В этом случае процессы могут выполняться только последовательно.
Информация о процессах представлена в файле в виде таблицы. В первом столбце таблицы указан
идентификатор процесса (ID), во втором столбце таблицы – время его выполнения в миллисекундах, в
третьем столбце перечислены с разделителем «;» ID процессов, от которых зависит данный процесс.
Если процесс является независимым, то в таблице указано значение 0.
Определите минимальное время, через которое завершится выполнение всей совокупности
процессов, при условии, что все независимые друг от друга процессы могут выполняться
параллельно.
Типовой пример организации данных в файле:В данном случае независимые процессы 1 и 2
могут выполняться параллельно, при этом процесс 1 завершится через 4 мс, а процесс 2 – через 3 мс с
момента старта. Процесс 3 может начаться только после завершения обоих процессов 1 и 2, то есть,
через 4 мс после старта. Он длится 1 мс и закончится через 4 + 1 = 5 мс после старта. Выполнение
процесса 4 может начаться только после завершения процесса 3, то есть, через 5 мс. Он длится 7 мс,
так что минимальное время завершения всех процессов равно 5 + 7 = 12 мс.
'''
'''↓ Лучший вариант кода ↓'''
##def calc(d, i):
##    if '0' in d[i]['r']:
##        return d[i]['t']
##    mx = max([calc(d, j) for j in d[i]['r']])
##    d[i]['r'] = ['0']
##    d[i]['t'] += mx
##    return d[i]['t']
##
##with open('data/22-4.csv') as f:
##    rdr = [i for i in reader(f, delimiter=';', quotechar='"')]
##    d = {}
##    for lst in rdr[1:]:
##        d[lst[0]] = {'t': int(lst[1]), 'r': [j.strip() for j in lst[2].split(';')]}
##
##print(max([calc(d, i) for i in d]))


'''
6. (Л. Шастин) В файле 22-6.xls содержится информация о совокупности N вычислительных
процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что
процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты
выполнения процесса A. В этом случае процессы могут выполняться только последовательно.
Информация о процессах представлена в файле в виде таблицы. В первом столбце таблицы указан
идентификатор процесса (ID), во втором столбце таблицы – время его выполнения в миллисекундах, в
третьем столбце перечислены с разделителем «;» ID процессов, от которых зависит данный процесс.
Если процесс является независимым, то в таблице указано значение 0.
Среди всех независимых процессов найдите самый длительный и самый быстрый (заканчивающийся
за минимальное время). В качестве ответа укажите разницу между временами выполнения этих
процессов.
'''
def calc(d, i):
    if '0' in d[i]['r']:
        return d[i]['t']
    mx = max([calc(d, j) for j in d[i]['r']])
    d[i]['r'] = ['0']
    d[i]['t'] += mx
    return d[i]['t']

with open('data/22-6.csv') as f:
    rdr = [i for i in reader(f, delimiter=';', quotechar='"')]
    d = {}
    for lst in rdr[1:]:
        d[lst[0]] = {'t': int(lst[1]), 'r': [j.strip() for j in lst[2].split(';')]}

res = [calc(d, i) for i in d if '0' in d[i]['r']]
print(max(res) - min(res))
