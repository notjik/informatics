from functools import lru_cache
from csv import reader
from itertools import product, combinations
from math import ceil

import scratches_algorithms
from scratches_algorithms import utils

"""
1. На рисунке справа схема дорог Н-ского района изображена в виде графа, в таблице содержатся
сведения о длинах этих дорог (в километрах).
Так как таблицу и схему рисовали
независимо друг от друга, то нумерация населённых пунктов в таблице никак не связана с
буквенными обозначениями на графе. Определите длину кратчайшего пути из пункта А в пункт В,
если передвигаться можно только по указанным дорогам. В ответе запишите целое число – длину
пути в километрах.
"""
# # TODO: Ответ – 17 (А -> Б -> В)

"""
2. (И. Женецкий) Логическая функция F задаётся выражением ¬(z ∨ x) ∨ y ∧ ¬x ∧ (z ∧ y → z). На
рисунке приведён частично заполненный фрагмент таблицы истинности функции F, содержащий
неповторяющиеся строки. Определите, какому столбцу таблицы истинности функции F соответствует
каждая из переменных x, y, z.
В ответе напишите буквы x, y, z в том порядке, в котором идут
соответствующие им столбцы. Буквы в ответе пишите подряд, никаких разделителей между буквами
ставить не нужно.
"""
# # TODO: Ответ – yxz
# print('y x z f')
# for x, y, z in product([0, 1], repeat=3):
#     f = int(not (z or x) or y and not x and (not (z and y) or z))
#     if f:
#         print(y, x, z, f)


"""
3. (А. Рогов) В файле 3-40.xls приведён фрагмент базы фрагмент базы данных «Города и страны»,
описывающей различные страны, города и языки. База данных состоит из трех таблиц. Таблица
«Страны» (код, название, континент, регион, площадь, год получения независимости, население,
ОПЖ – ожидаемая продолжительность жизни, ВНД – валовый национальный доход, предыдущее
значение ВНД, форма правления, идентификатор столицы). Таблица «Города» (идентификатор,
название, код страны, район, население). Таблица «Языки» (код языка, код страны, название, является
ли официальным, процент использования в стране). По некоторым значениям данных нет, в этом
случае в таблице внесено значение NULL. На рисунке приведена схема базы данных.
Используя информацию из приведённой базы данных,
определите среднее население стран Европы, в которых наиболее популярный официальный язык
используют менее 60% населения. В ответе укажите только целую часть получившегося числа.
"""
# # TODO: Ответ – 2129900


"""
4. Все заглавные буквы русского алфавита закодированы неравномерным двоичным кодом, для
которого выполняется условие Фано: никакое кодовое слово не совпадает с началом другого кодового
слова. Известно, что слову КРАЧКА соответствует код 10001110101011. Какой код соответствует
слову ЧАКА?
"""
# # TODO: Ответ – 010111011


"""
5. На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R
следующим образом.
1. Строится двоичная запись числа N.
2. К этой записи дописывается (дублируется) последняя цифра.
3. Затем справа дописывается бит чётности: 0, если в двоичном коде полученного числа чётное число
единиц, и 1, если нечётное.
4. К полученному результату дописывается ещё один бит чётности.
Полученная таким образом запись (в ней на три разряда больше, чем в записи исходного числа N)
является двоичной записью искомого числа R. Какое минимальное число R, большее 114, может быть
получено в результате работы автомата?
"""
# # TODO: Ответ – 126
# for n in range(0, 1000):
#     r = bin(n)[2:]
#     r += r[-1]
#     for i in range(2):
#         r += '0' if not(r.count('1') % 2) else '1'
#     r = int(r, 2)
#     if r > 114:
#         print(r)
#         break


"""
6. Определите, при каком наименьшем введенном значении переменной x программа выведет число
915.
"""
# # TODO: Ответ – 178086434
# for i in range(178086400, 1780800000):
#     x = i
#     n = 278
#     while (x+n)//1000 < 178453:
#         x = x - 3
#         n = n + 5
#     if n//1000 == 915:
#         print(i)
#         break


"""
7. (А.М. Кабанов) Камера снимает видео без звука с частотой 24 кадра в секунду, при этом
изображения используют палитру, содержащую 224 = 16 777 216 цветов. Параллельно производится
запись стереозвука. 1 минута видеоряда в среднем занимает 36 Мбайт, 1 минута звуковой дорожки
занимает в среднем 6 Мбайт. Для хранения видео преобразуют так, что для изображений
используется палитра в 256 цветов, а звук перезаписывается в формате моно, при этом частота
дискретизации уменьшается в 2 раза, а глубина кодирования уменьшается в 1,5 раза. Другие
преобразования и иные методы сжатия не используются. Сколько Мбайт в среднем занимает 1 минута
преобразованного видео со звуком?
"""
# # TODO: Ответ – 13
# print((((36*2**23)*(8/24))/(2**23))+(((6*2**23)*(1/2)*(2/3)*(1/2))/(2**23)))


"""
8. (П. Волгин) Сколько существует натуральных чисел, шестнадцатеричная запись которых содержит
6 знаков, не начинается с единицы и заканчивается на AB?
"""
# # TODO: Ответ – 57344
# c = 0
# for i in range(int('200000', 16), int('ffffab', 16) + 1):
#     if hex(i)[2:].endswith('ab'):
#         c += 1
# print(c)


"""
9. Откройте файл электронной таблицы 9-0.xls, содержащей результаты ежечасного измерения
температуры воздуха на протяжении трёх месяцев. Найдите количество дней в апреле, когда средняя
температура с 07:00 до 10:00 (включительно) была ниже, чем средняя температура с 19:00 до 22:00
(включительно).
"""
# # TODO: Ответ – 17


"""
10. В файле 10-141.docx приведена книга Н.В. Гоголя «Вечера на хуторе близ Диканьки». Сколько раз
слово «будто» встречается в тексте повести «Страшная месть» (не считая сносок)? Регистр написания
слова не имеет значения. В ответе укажите только число.
"""
# # TODO: Ответ – 39


"""
11. При регистрации в компьютерной системе каждому пользователю выдаётся пароль, состоящий из
15 символов и содержащий только символы из 8-символьного набора: А, В, C, D, Е, F, G, H. В базе
данных для хранения сведений о каждом пользователе отведено одинаковое и минимально возможное
целое число байт. При этом используют посимвольное кодирование паролей, все символы кодируют
одинаковым и минимально возможным количеством бит. Кроме собственно пароля, для каждого
пользователя в системе хранятся дополнительные сведения, для чего выделено целое число байт; это
число одно и то же для всех пользователей. Для хранения сведений о 20 пользователях потребовалось
300 байт. Сколько байт выделено для хранения дополнительных сведений об одном пользователе?
"""
# # TODO: Ответ – 9
# print(300//20 - ceil(3*15/8))


"""
12. Исполнитель Редактор получает на вход строку цифр и преобразовывает её. Редактор может
выполнять две команды, в обеих командах v и w обозначают цепочки символов.
1. заменить (v, w)
2. нашлось (v)
Первая команда заменяет в строке первое слева вхождение цепочки v на цепочку w. Если цепочки v в
строке нет, эта команда не изменяет строку. Вторая команда проверяет, встречается ли цепочка v в
строке исполнителя Редактор.
Дана программа для исполнителя Редактор:
НАЧАЛО
ПОКА нашлось (10) ИЛИ нашлось (1)
 ЕСЛИ нашлось (10)
 ТО заменить (10, 001)
 ИНАЧЕ заменить (1, 00)
 КОНЕЦ ЕСЛИ
КОНЕЦ ПОКА
КОНЕЦ
Какая строка получится в результате применения приведённой ниже программы к строке, состоящей
из одной единицы и 75 стоящих справа от нее нулей? В ответе запишите, сколько нулей будет в
конечной строке.
"""
# # TODO: Ответ – 152
# s = '1' + '0' * 75
# while '10' in s or '1' in s:
#     if '10' in s:
#         s = s.replace('10', '001', 1)
#     else:
#         s = s.replace('1', '00', 1)
# print(s.count('0'))


"""
13. На рисунке представлена схема дорог, связывающих города А, Б, В, Г, Д, Е, Ж, З, И, К. По каждой
дороге можно двигаться только в одном направлении, указанном стрелкой. Какова длина самого
длинного пути из города А в город Ж? Длиной пути считать количество дорог, составляющих этот
путь.
"""
# # TODO: Ответ – 7


"""
14. (П.М. Волгин) Значение арифметического выражения 100**2 + 625**25 + 5**100 записали в системе
счисления с основанием 15. В этой записи помимо цифр от 0 до 9 могут встречаться цифры из списка:
№, #, @, $, *, которые имеют числовые значения от 10 до 14 соответственно. Сколько цифр @
встречается в этой записи?
"""
# # TODO: Ответ – 3
# print(NumeralSystem.to_base(100**2 + 625**25 + 5**100, 15).count('c'))


"""
15. На числовой прямой даны два отрезка: P = [10, 80] и Q = [30, 50]. Найдите набольшую возможную
длину отрезка A, при котором формула
(x ∈ A) → ((x ∈ P) ∧ ¬(x ∈ Q))
тождественно истинна, то есть принимает значение 1 при любых x
"""
# # TODO: Ответ – 20


"""
16. (П. Волгин) Алгоритм вычисления значения функции F(n), где n – целое неотрицательное число,
задан следующими соотношениями:
F(n) = 1 при n ≤ 1
F(n) = 11·n + F(n - 1), если n > 1 и n чётное
F(n) = 11·F(n - 2) + n в остальных случаях
Определите сумму четных значений F(n) для всех n на отрезке [35,50]. В качестве ответа запишите
количество цифр в десятичной записи этой суммы.
Примечание: необходимо использовать арифметику многоразрядных чисел.
"""
# # TODO: Ответ – 25
# @lru_cache(None)
# def F(n):
#     if n <= 1:
#         return 1
#     return 11 * n + F(n - 1) if not (n % 2) else 11 * F(n - 2) + n
#
#
# print(len(str(sum([F(n) for n in range(35, 51) if not (F(n) % 2)]))))


"""
17. (А. Кабанов) В файле 17-4.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от 0 до 10 000 включительно. Рассматривается
множество элементов последовательности, больших 100, которые удовлетворяют следующим
условиям:
− цифра в разряде десятков не превышает 4;
− цифра в разряде сотен принадлежит отрезку [3; 7].
Найдите количество таких чисел и минимальное из них.
"""
# # TODO: Ответ – 502 1305
# with open('data/17-4.txt') as f:
#     data = list(map(int, f.readlines()))
# c = 0
# mn = 10000
# for i in data:
#     if i > 100 and i % 100 // 10 <= 4 and 3 <= i % 1000 // 100 <= 7:
#         c += 1
#         mn = min(mn, i)
# print(c, mn)


"""
18. (А. Богданов) Исходные данные для Робота записаны в файле 18-0.xls в виде электронной таблицы
прямоугольной формы. Роботу нужно перейти через поле с юга (нижняя строка) на север (верхняя
строка). Он может начать переход с любой клетки нижней строки и закончить на любой клетке
верхней строки. С каждым шагом Робот переходит в следующий ряд и может за одно перемещение
попасть в одну из трех клеток следующей строки (на клетку прямо или боковые с ней). Ходы только в
бок (без смены строки) и/или назад запрещены. В каждой клетке поля лежит монета достоинством от
1 до 100. Робот собирает все монеты по пройденному маршруту.
Робот собрал минимальную возможную сумму, пройдя с южной границы поля (снизу) до северной
границы поля (сверху). В ответе укажите два числа: достоинства монет на первой и последней
клетках маршрута.
"""
# # TODO: Ответ – 13 18


"""
19. (А. Кабанов) Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит две кучи
камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в
любую кучу два камня или увеличить количество камней в любой куче в три раза. Игра
завершается в тот момент, когда общее количество камней в двух кучах становится не менее 45.
Победителем считается игрок, сделавший последний ход. В начальный момент в первой куче было
K≥1 камней, а во второй – S≥1 камней, K+S ≤ 43.
Ответьте на следующие вопросы:
Вопрос 1. Сколько существует пар (K; S), таких что Ваня выигрывает первым ходом при любой игре
Пети?
Вопрос 2. При K=4, найдите минимальное и максимальное значение S, при котором у Пети есть
выигрышная стратегия, причём одновременно выполняются два условия:
− Петя не может выиграть за один ход;
− Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
Найденные значения запишите в ответе в порядке возрастания.
Вопрос 3. При K=13 найдите такое значение S, при котором, при котором одновременно
выполняются два условия:
– у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при
любой игре Пети;
– у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.
"""
# # TODO: Ответ –
# #  1: 16
# #  2: 7 11
# #  3: 1
# @lru_cache(None)
# def game(x, y):
#     if x + y >= 45:
#         return 0
#     tmp = [game(x + 2, y), game(x, y + 2),
#            game(x * 3, y), game(x, y * 3)]
#     negative = [i for i in tmp if i <= 0]
#     if len(negative) != 0:
#         return -max(negative) + 1
#     return -max(tmp)
#
#
# print(min([s for s in range(1, 44 - 4) if game(4, s) == 2]), max([s for s in range(1, 44 - 4) if game(4, s) == 2]))
# print(*[s for s in range(1, 44 - 13) if game(13, s) == -2])


"""
20. (Л. Евич) В файле 22-14e.xls содержится информация о совокупности N вычислительных
процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что
процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты
выполнения процесса A. В этом случае процессы могут выполняться только последовательно.
Информация о процессах представлена в файле в виде таблицы. В первом столбце таблицы указан
идентификатор процесса (ID), во втором столбце таблицы – время его выполнения в миллисекундах, в
третьем столбце перечислены с разделителем «;» ID процессов, от которых зависит данный процесс.
Если процесс является независимым, то в таблице указано значение 0.
Определите минимальное время, через которое завершится выполнение всей совокупности
процессов, при условии, что все независимые друг от друга процессы могут выполняться
параллельно.
Типовой пример организации данных в файле:
В данном случае независимые процессы 1 и 2
могут выполняться параллельно, при этом процесс 1 завершится через 4 мс, а процесс 2 – через 3 мс с
момента старта. Процесс 3 может начаться только после завершения обоих процессов 1 и 2, то есть,
через 4 мс после старта. Он длится 1 мс и закончится через 4 + 1 = 5 мс после старта. Выполнение
процесса 4 может начаться только после завершения процесса 3, то есть, через 5 мс. Он длится 7 мс,
так что минимальное время завершения всех процессов равно 5 + 7 = 12 мс.
"""
# # TODO: Ответ – 32
# def calc(data, i):
#     if 0 in data[i]['relationships']:
#         return data[i]['time']
#     mx = 0
#     for search in data[i]['relationships']:
#         f = calc(data, search)
#         mx = max(mx, f)
#     data[i]['relationships'] = [0]
#     data[i]['time'] += mx
#     return data[i]['time']
#
#
# with open('data/22-14e.csv') as f:
#     rdr = [i for i in reader(f, delimiter=';', quotechar='"')]
#     data = {}
#     for col in rdr[1:]:
#         data[int(col[0])] = {'time': int(col[1]), 'relationships': [int(x.strip()) for x in col[2].split(';')]}
# mx = 0
# for i in data:
#     f = calc(data, i)
#     mx = max(mx, f)
# print(mx)


"""
21. (А. Комков) Исполнитель Нолик преобразует двоичное число, записанное на экране. У
исполнителя есть три команды, которым присвоены номера:
1. Прибавить 1
2. Добавить справа 0
3. Добавить справа 1
Первая команда увеличивает число на 1. При выполнении второй команды, исполнитель справа к
числу приписывает 0, а при выполнении третьей команды справа к числу приписывает 1. (например,
для числа 10 результатом работы данных команд будут являться числа 100 и 101 соответственно).
Сколько существует программ, которые исходное двоичное число 100 преобразуют в двоичное число
11101?
"""
# # TODO: Ответ – 79
# def f(x, n):
#     if x > n:
#         return 0
#     if x == n:
#         return 1
#     return f(x + 1, n) + f(int(bin(x)[2:] + '0', 2), n) + f(int(bin(x)[2:] + '1', 2), n)
#
#
# print(f(int('100', 2), int('11101', 2)))


"""
22. (А. Богданов) Текстовый файл 24-180.txt содержит строку из десятичных цифр, всего не более чем
из 106
 символов. Файл образовался в результате последовательной записи «таймкодов» некоторых
событий в формате HHMM (часы и минуты слитно по две цифры, т.е. всего 4 цифры на «таймкод», от
0000 до 2359) и прочих случайных данных. Найдите максимально возможное количество подряд
идущих «таймкодов» между фрагментами случайной информации.
Например, в строке 4212231135414447 можно выделить таймкоды тремя способами:
4[2122]3[1135]4[1444]7, 42[1223,1135]4[1444]7 или 421[2231,1354,1444]7. В последнем случае
получилось наибольшее количество таймкодов подряд - три, это число и нужно ввести в ответе.
"""
# # TODO: Ответ – 2504
# with open('data/24-180.txt') as f:
#     data = f.readline().strip()
# res = 0
# tmp = [0, 0, 0, 0]
# for i in range(len(data) - 3):
#     if int(data[i:i+2]) < 24 and int(data[i+2:i+4]) < 60:
#         tmp[i % 4] += 1
#     else:
#         res = max(res, tmp[i % 4])
#         tmp[i % 4] = 0
# print(res)


"""
23. (А. Богданов) Среди чисел, больших куба максимального простого двузначного числа, найдите 5
минимальных чисел, у которых есть ровно три различных трехзначных делителя, оканчивающихся на
3. Для каждого из 5 найденных чисел выводится само число, а затем его минимальный трехзначный
делитель, оканчивающийся на 3.
"""
# # TODO: Ответ –
# #  991027013 23
# #  991027020 3
# #  991027044 3
# #  991027066 103
# #  991027080 3
# number = -1
# for i in range(999, 99, -1):
#     if DivFunc.is_prime(i):
#         number = i
#         break
# if number != -1:
#     number **= 3
# else:
#     raise SystemExit('Не найдено максимальное простое двузначное число')
# res = []
# for i in range(number, number**2):
#     divisors_ending_in_3 = [j for j in DivFunc.divisor(i) if j % 10 == 3]
#     if len(divisors_ending_in_3) == 3:
#         res.append([i, min(divisors_ending_in_3)])
#     if len(res) >= 5:
#         break
# [print(*i) for i in res]


"""
24. (А.М. Кабанов)На складе лежат пакеты с углём различного веса и стоимости. Вес и стоимость
записаны на каждом пакете как натуральные числа: вес не превосходит 100, стоимость не
превосходит 10000. Для транспортировки отбираются K пакетов с самой выгодной ценой угля за
единицу веса. По заданной информации о пакетах с углём и количестве транспортируемых пакетов
определите наибольший возможный вес отправленного угля и стоимость самого тяжёлого
отправленного пакета.
Входные данные. Первая строка входного файла 26-k6.txt содержит натуральное числа N –
количество пакетов на складе (натуральное число, не превышающее 1000) и K – количество пакетов
на отправку (натуральное число, не превосходящее 100). В каждой из последующих N строк через
пробел записаны два числа – вес и стоимость каждого пакета.
Запишите в ответе два числа – сначала наибольший возможный вес отправленных пакетов, затем
стоимость самого тяжёлого отправленного пакета.
Пример входного файла:
10 4
47 470
50 600
60 480
45 540
30 300
15 180
70 560
30 360
91 910
40 320
При таких исходных данных самая выгодная стоимость у пакетов весом 60, 70, 40; затем – у пакетов
весом 91, 30, 47. Поэтому наибольший возможный вес к отправке равен 70+60+40+91 = 261, а
стоимость самого тяжёлого отправленного пакета равна 910.
"""
# # TODO: Ответ – 5931 800
with open('data/26-k6.txt') as f:
    n, k = map(int, f.readline().split())
    data = list(map(lambda x: tuple(map(int, x.split())), f.readlines()))
for i in range(n - 1):
    for j in range(n - i - 1):
        if (data[j + 1][0] / data[j + 1][1]) > (data[j][0] / data[j][1]) or \
                ((data[j + 1][0] / data[j + 1][1]) == (data[j][0] / data[j][1]) and data[j + 1][0] > data[j][0]):
            data[j + 1], data[j] = data[j], data[j + 1]
res = data[:k]
print(sum(i[0] for i in res), res[0][-1])

"""
25. (Л. Шастин) На вход программе поступает последовательность натуральных чисел. Назовём
«границами» одинаковые числа. Найдите количество подпоследовательностей исходной
последовательности с ненулевой суммой элементов, кратной D, расположенных меж двух «границ».
Примечание: искомые подпоследовательности могут включать себя и другие «границы», но обязаны
быть открыты и закрыты какими-либо «границами».
Входные данные. Даны два входных файла (файл A и файл B), содержит в первой строке число N (2
≤ N ≤ 5 000 000) – количество чисел в последовательности, и число D. Каждая из следующих N строк
содержит одно натуральное число, не превышающее 10000.
Пример входного файла:
6 2
4
2
4
3
5
4
В этой последовательности можно выбрать три подходящих подпоследовательности: {2} (сумма
элементов последовательности 2 кратна D = 2, границы – числа 4); {3, 5} (сумма элементов
последовательности 8 кратна D = 2, границы – числа 4); {2, 4, 3, 5} (сумма элементов
последовательности 14 кратна D = 2, границы – числа 4). Ответ: 3.
В ответе укажите два числа: сначала искомое значение для файла А, затем для файла B.
"""
#
#
# def solution(n, d, data):
#     c = 0
#     for i in range(n - 2):
#         s = 0
#         for j in range(i + 1, n - 1):
#             s += data[j]
#             if not (s % d) and data[i] == data[j + 1]:
#                 c += 1
#     return c
#
#
# # TODO: Ответ – 101
# with open('data/27-117a.txt') as f:
#     n, d = map(int, f.readline().split())
#     data = list(map(int, f.readlines()))
# print(solution(n, d, data), end=' ')
# with open('data/27-117b.txt') as f:
#     n, k = map(int, f.readline().split())
#     data = list(map(int, f.readlines()))
# print(solution(n, d, data))
