from itertools import product
from functools import lru_cache
from math import ceil

"""
1 (В.Н. Шубинкин) Обозначим через ДЕЛ(n, m) утверждение «натуральное число n делится без остатка на
натуральное число m». Для какого наибольшего натурального числа A формула
((ДЕЛ(x, 36) ∧ ДЕЛ(x, 42)) → ДЕЛ(x, A)) ∧ ( A·(A – 25) < 25·(A + 200))
тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной х)?
"""
# # TODO: Ответ — 84
# res = None
# for A in range(1, 10000):
#     accept = True
#     for x in range(1, 10000):
#         f = (not (x % 36 == 0 and x % 42 == 0) or x % A == 0) and (A * (A - 25) < 25 * (A + 200))
#         if not f:
#             accept = False
#             break
#     if accept:
#         res = A
# print(res)


"""
2 Укажите наименьшее целое значение А, при котором выражение
(2y + x < A) ∨ (x > 10) ∨ (y > 25)
истинно для любых целых положительных значений x и y.
"""
# # TODO: Ответ — 61
# for A in range(1000):
#     accept = True
#     for x, y in product(range(1000), repeat=2):
#         f = (2 * y + x < A) or (x > 10) or (y > 25)
#         if not f:
#             accept = False
#             break
#     if accept:
#         print(A)
#         break


"""
3 (А. Богданов) Алгоритмы вычисления функций F(n) и G(n) заданы следующими соотношениями (здесь // –
операция деления нацело, % – остаток от деления):
F(n) = n, при n < 10,
F(n) = n % 10 + F(n // 10), при n ≥ 10.
G(n) = n, при n < 10,
G(n) = G(F(n)), при n ≥ 10
Чему равна сумма значений функции G(n) для всех двузначных n?
"""
# # TODO: Ответ — 450
# def F(n):
#     return n if n < 10 else n % 10 + F(n // 10)
#
# def G(n):
#     return n if n < 10 else G(F(n))
#
#
# res = 0
# for n in range(10, 100):
#     res += G(n)
# print(res)


"""
4 Алгоритм вычисления значения функции F(n), где n – целое число, задан следующими соотношениями:
F(n) = 1, при n < 2,
F(n) = F(n/3) - 1, когда n ≥ 2 и делится на 3,
F(n) = F(n - 1) + 7, когда n ≥ 2 и не делится на 3.
Назовите минимальное значение n, для которого F(n) равно 111.
"""
# # TODO: Ответ — 32804
# def F(n):
#     if n < 2:
#         return 1
#     return F(n // 3) - 1 if not n % 3 else F(n - 1) + 7
#
#
# res = []
# for n in range(100000):
#     if F(n) == 111:
#         print(n)
#         res.append(n)
# print(min(res))


"""
5 В файле 17-1.txt содержится последовательность целых чисел. Элементы последовательности могут
принимать целые значения от –10 000 до 10 000 включительно. Определите количество троек, в которых хотя
бы один из трёх элементов меньше, чем среднее арифметическое всех чисел в файле, и хотя бы один из трёх
элементов делится на 3. В ответе запишите два числа:сначала количество найденных троек, а затем –
максимальную сумму элементов таких троек. В данной задаче под тройкой подразумевается три идущих подряд
элемента последовательности.
"""
# # TODO: Ответ — 6151 18891
# with open('data/17-1.txt') as f:
#     data = list(map(int, f.readlines()))
# avg = sum(data) / len(data)
# c = 0
# mx = -30000
# for i in range(len(data) - 2):
#     if any(elem < avg for elem in data[i:i+3]) and any(not elem % 3 for elem in data[i:i+3]):
#         c += 1
#         mx = max(mx, sum(data[i:i+3]))
# print(c, mx)


"""
6 (А. Кабанов) В файле 17-4.txt содержится последовательность целых чисел. Элементы последовательности
могут принимать целые значения от 0 до 10 000 включительно. Рассматривается множество элементов
последовательности, которые удовлетворяют следующим условиям:
− в числе есть хотя бы два нуля;
− число кратно 7.
Найдите наибольшее из таких элементов последовательности и их количество.
"""
# # TODO: Ответ — 9009 10
# with open('data/17-4.txt') as f:
#     data = list(map(int, f.readlines()))
# mx = 0
# c = 0
# for elem in data:
#     if str(elem).count('0') >= 2 and not elem % 7:
#         mx = max(mx, elem)
#         c += 1
# print(mx, c)

"""
7 (М. Коротков, г. Челябинск) Квадрат разлинован на N×N клеток (1 < N < 20). Исполнитель Пассажир на
Самокатике перемещается из левой нижней клетки в правую верхнюю, выполняя за одно перемещение одну из
двух команд: вправо или вверх. По команде вправо он перемещается в соседнюю правую клетку, по команде
вверх – в соседнюю верхнюю. При попытке выхода за границу квадрата Самокатик разваливается на части и
прекращает движение. В каждой клетке квадрата записано целое число в диапазоне от -100 до 100. Самокатик –
электрический; начальный уровень заряда его батареи указан в левой нижней клетке квадрата. При посещении
очередной клетки уровень заряда батареи Самокатика изменяется на указанное в ней значение, но не может
стать меньше 0 или больше 100. Это также относится к конечной клетке маршрута. Всякий раз, когда уровень
заряда батареи Самокатика опускается до нуля, Пассажир спешивается и тащит его на себе.
Определите максимально возможный уровень заряда батареи Самокатика в конечной клетке, если Пассажиру
на протяжении всего маршрута:
A) запрещено спешиваться;
B) разрешено спешиваться.
Исходные данные для Робота записаны в файле 18-108.xls в виде прямоугольной таблицы, каждая ячейка
которой соответствует клетке квадрата. В ответе запишите сначала ответ на вопрос А, затем – ответ на вопрос
B.
"""
# # TODO: Ответ — 51 71


"""
8 (В.Н. Шубинкин) Исходные данные для Робота записаны в файле 18-11.xls в виде электронной таблицы
прямоугольной формы. Робот может двигаться только вверх и вправо. В любой клетке может быть стена
(стены обозначены значениями больше 100, но меньше 500). При попытке зайти на клетку со стеной Робот
разрушается. С каждой клетки Робот забирает все монеты, если их количество кратно 3 или 4 (иначе он не
берёт ни одной монеты). Определите максимальную и минимальную денежную сумму, которую может собрать
Робот, пройдя из левой НИЖНЕЙ клетки в правую ВЕРХНЮЮ. В ответе укажите два числа – сначала
максимальную сумму, затем минимальную.
"""
# # FIXME: Ответ — 990 48


"""
9, 10, 11 (А. Кабанов) Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи
камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может убрать из одной из куч
один камень или уменьшить количество камней в куче в два раза (если количество камней в куче нечётно,
остаётся на 1 камень больше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую
позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх
позиций: (5, 9), (3, 9), (6, 8), (6, 5). Игра завершается в тот момент, когда суммарное количество камней в кучах
становится не более 20. Победителем считается игрок, сделавший последний ход, то есть первым получивший
позицию, в которой в кучах будет 20 или меньше камней. В начальный момент в первой куче было 10 камней,
во второй куче – S камней, S > 10.
Ответьте на следующие вопросы:
Вопрос 1. Найдите значение S, при котором Ваня выигрывает своим первым ходом при любой игре Пети.
Вопрос 2. Найдите минимальное и максимальное значение S, при котором у Пети есть выигрышная стратегия,
причём одновременно выполняются два условия:
− Петя не может выиграть за один ход;
− Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
Найденные значения запишите в ответе в порядке возрастания.
Вопрос 3. Найдите значение S, при котором одновременно выполняются два условия:
– у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре
Пети;
– у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом
"""
# # TODO: Ответ —
# #  1) 21
# #  2) 22 42
# #  3) 24
# @lru_cache(None)
# def game(a, b):
#     if a + b <= 20:
#         return 0
#     tmp = []
#     if a - 1 >= 0:
#         tmp.append(game(a - 1, b))
#     if b - 1 >= 0:
#         tmp.append(game(a, b - 1))
#     if ceil(a / 2) > 1:
#         tmp.append(game(ceil(a / 2), b))
#     if ceil(b / 2) > 1:
#         tmp.append(game(a, ceil(b / 2)))
#     ng = [i for i in tmp if i <= 0]
#     if ng:
#         return -max(ng) + 1
#     return -max(tmp)
#
#
# print(*[s for s in range(11, 100) if game(10, s) == -1])
# task2 = [s for s in range(11, 100) if game(10, s) == 2]
# print(min(task2), max(task2))
# print(*[s for s in range(11, 100) if game(10, s) == -2])


"""
12, 13, 14 Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки
ходят по очереди, первый ход делает Петя. За один ход игрок может
а) добавить в кучу один камень;
б) увеличить количество камней в куче в два раза.
Игра завершается в тот момент, когда количество камней в куче становится не менее 50. Если при этом в куче
оказалось не более 70 камней, то победителем считается игрок, сделавший последний ход. В противном случае
победителем становится его противник. В начальный момент в куче было S камней, 1 ≤ S ≤ 49.
Ответьте на следующие вопросы:
Вопрос 1. Известно, что Ваня выиграл своим первым ходом после первого хода Пети. Назовите минимальное
значение S, при котором это возможно.
Вопрос 2. Определите два таких значения S, при которых у Пети есть выигрышная стратегия, причём
одновременно выполняются два условия:
− Петя не может выиграть за один ход;
− Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
Найденные значения запишите в ответе в порядке возрастания.
Вопрос 3. Найдите значение S, при которых одновременно выполняются два условия:
– у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре
Пети;
– у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.
"""
# # TODO: Ответ —
# #  1) 13
# #  2) 24 47
# #  3) 46
@lru_cache(None)
def game(x):
    if x >= 50:
        return 0
    tmp = [game(x + 1)]
    if x * 2 < 70:
        tmp.append(game(x * 2))
    ng = [i for i in tmp if i <= 0]
    if ng:
        return -max(ng) + 1
    return -max(tmp)


print(*[s for s in range(1, 49) if game(s) == 2])
print(*[s for s in range(1, 49) if game(s) == -2])
