import re

from itertools import product, permutations
from math import ceil
from functools import lru_cache


def to_base(n, b):
    a = "0123456789abcdefghijklmnopqrstuvwxyz"
    r = a[n % b]
    while n >= b:
        n = n // b
        r += a[n % b]
    return r[::-1]


"""
1 На рисунке справа схема дорог Н-ского района изображена в виде графа, в таблице содержатся сведения о
длинах этих дорог (в километрах).
Так как таблицу и схему рисовали
независимо друг от друга, то нумерация населённых пунктов в таблице никак не связана с буквенными
обозначениями на графе. Укажите кратчайший путь из пункта Б в пункт Ж. В ответе перечислите все
населённые пункты, через которые проходит путь. Например, путь из Г в В через А и Б записывается как
ГАБВ.
"""
# # TODO: Ответ – бвгеж


"""
2 (Е. Джобс) Логическая функция F задаётся выражением a ≡ b ∨ b → c.
На рисунке приведён частично заполненный фрагмент таблицы
истинности функции F, содержащий неповторяющиеся строки. Определите, какому столбцу таблицы
истинности функции F соответствует каждая из переменных a, b, c.
"""
# # TODO: Ответ – bca
# print('b c a f')
# for a, b, c in product([0, 1], repeat=3):
#     f = int(a == (not (b or b) or c))
#     if f:
#         print(b, c, a, f)


"""
3 (А. Рогов) В файле 3-30.xls приведён фрагмент базы фрагмент базы данных «Русский рок», описывающей
советские и российские рок-группы. База данных состоит из двух таблиц. Таблица «Группы» содержит
информацию о музыкальных коллективах: ID, название, год основания. Таблица «Альбомы» содержит
информацию о студийных музыкальных альбомах: ID, название, ID группы, год издания, количество песен.
Для каждой группы в базе данных указано ровно 3 альбома. На рисунке приведена схема базы данных.
Используя информацию из приведённой базы данных,
определите, у скольких групп из указанных в базе данных с момента основания и до выхода последнего из
указанных альбомов прошло не менее 20 лет.
"""
# # TODO: Ответ – 4

"""
4 (С. Якунин) Для кодирования некоторой последовательности, состоящей из букв А, Т, З, Н, И, Е решили
использовать неравномерный двоичный код, удовлетворяющий условию Фано. Для букв А и Т
использовали кодовые слова 01 и 00, соответственно. Найдите кодовое слово наибольшей длины, если
известно, что слово АНТИТЕЗА закодировано, с помощью 21 бита. Если возможно несколько вариантов
ответа, выберите код с наименьшим числовым значением.
"""
# # TODO: Ответ – 011000001010011011101
# l = 'А, Т, З, Н, И, Е'.split(', ')
# s = 'АНТИТЕЗА'
# print(*sorted({i: s.count(i) for i in l}.items(), key=lambda x: x[1], reverse=True), sep='\n')
# print('01 1000 00 101 00 110 111 01'.replace(' ', ''))


"""
5 Автомат обрабатывает натуральное число N > 1 по следующему алгоритму:
1) Строится двоичная запись числа N.
2) В конец записи (справа) дописывается вторая справа цифра двоичной записи.
3) В конец записи (справа) дописывается вторая слева цифра двоичной записи.
4) Результат переводится в десятичную систему.
Пример. Дано число N = 11. Алгоритм работает следующим образом.
1) Двоичная запись числа N: 11 = 10112
2) Вторая справа цифра 1, новая запись 101112.
3) Вторая слева цифра 0, новая запись 1011102.
4) Десятичное значение полученного числа 46.
Для скольких значений N в результате работы алгоритма получится число, принадлежащее отрезку [150;
250]?
"""
# # TODO: Ответ – 24
# c = 0
# for n in range(2, 10000):
#     r = bin(n)[2:]
#     r += r[-2]
#     r += r[1]
#     r = int(r, 2)
#     if 150 <= r <= 250:
#         c += 1
# print(c)


"""
6 Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент
Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси
ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый
конкретный момент известно положение исполнителя и направление его движения. У исполнителя
существует две команды: Вперёд n (где n – целое число), вызывающая передвижение Черепахи на n
единиц в том направлении, куда указывает её голова, и Направо m (где m – целое число), вызывающая
изменение направления движения на m градусов по часовой стрелке. Запись
Повтори k [Команда1 Команда2 … КомандаS]
означает, что последовательность из S команд повторится k раз. Черепахе был дан для исполнения
следующий алгоритм:
Повтори 10 [Направо 60 Вперёд 10 Направо 60]
Определите, сколько точек с целочисленными координатами будут находиться внутри области,
ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.
"""
# # TODO: Ответ – 42
# from turtle import *
#
# left(90)
# m = 50
# speed(0)
# color('black', 'red')
# begin_fill()
#
# for _ in range(10):
#     right(60)
#     forward(10*m)
#     right(60)
#
# end_fill()
# pu()
# for x in range(-1*m, 10*m, m):
#     for y in range(-6*m, 7*m, m):
#         goto(x, y)
#         dot(3, 'blue')
# mainloop()


"""
7 (И. Женецкий) Найдите битовую глубину кодирования растрового изображения размером 2048x8
пикселей, которое занимает 22 Кбайт? В ответе запишите только целое число, единицу измерения писать не
нужно.
"""
# # TODO: Ответ – 11
# print((22*2**13)/(2048*8))


"""
8 Сколько чисел длиной 6 можно составить, если известно, что цифры идут в порядке убывания, при этом
четные и нечетные цифры чередуются?
"""
# # TODO: Ответ – 35
c = 0
for n in permutations('0123456789', r=6):
    if n[0] == '0':
        continue
    flag = True
    for i in range(len(n) - 1):
        if not (int(n[i]) % 2 != int(n[i + 1]) % 2 and int(n[i]) > int(n[i + 1])):
            flag = False
            break
    if flag:
        c += 1
print(c)


"""
9 (П. Финкель) Откройте файл электронной таблицы 9-138.xls, содержащей целые числа – координаты трёх
точек в формате X1, X2, X3, Y1, Y2, Y3. Найдите количество таких строк, где все три точки лежат в одной
четверти координатной плоскости.
"""
# # TODO: Ответ – 290


"""
10 С помощью текстового редактора определите, сколько раз, не считая сносок, встречается слово «поэт»
или «Поэт» в тексте романа в стихах А.С. Пушкина «Евгений Онегин» (файл 10-0.docx). Другие формы
слова «поэт», такие как «поэты», «поэтами» и т.д., учитывать не следует. В ответе укажите только число.
"""
# # TODO: Ответ – 18


"""
11 Для регистрации на сайте некоторой страны пользователю необходимо придумать пароль длиной ровно
11 символов. В пароле можно использовать десятичные цифры и 12 различных символов местного
алфавита, причем все буквы используются в двух начертаниях – строчные и прописные. Каждый символ
кодируется одинаковым и минимально возможным количеством бит, а каждый пароль – одинаковым и
минимально возможным целым количеством байт. Определите объем памяти в байтах, необходимый для
хранения 60 паролей.
"""
# # TODO: Ответ – 540
# print(ceil((11 * 6) / 8) * 60)


"""
12 Исполнитель Редактор получает на вход строку цифр и преобразовывает её. Редактор может выполнять
две команды, в обеих командах v и w обозначают цепочки символов.
1. заменить (v, w)
2. нашлось (v)
Первая команда заменяет в строке первое слева вхождение цепочки v на цепочку w. Если цепочки v в
строке нет, эта команда не изменяет строку. Вторая команда проверяет, встречается ли цепочка v в строке
исполнителя Редактор.
Дана программа для исполнителя Редактор:
НАЧАЛО
ПОКА нашлось(01) ИЛИ нашлось(02) ИЛИ нашлось(03)
 заменить(01, 2302)  # 2310
 заменить(02, 10)  # 10
 заменить(03, 201)  # 22310
КОНЕЦ ПОКА
КОНЕЦ
Известно, что исходная строка начиналась с нуля, а далее содержала только единицы, двойки и тройки.
После выполнения данной программы получилась строка, содержащая 58 единиц, 23 двойки и 15 троек.
Сколько двоек было в исходной строке?
"""
# # TODO: Ответ – 43
# for i in range(1, 50):
#     for j in range(1, 50):
#         for k in range(1, 50):
#             s = '0' + '1' * i + '2' * j + '3' * k
#             while '01' in s or '02' in s or '03' in s:
#                 s = s.replace('01', '2310')
#                 s = s.replace('02', '10')
#                 s = s.replace('03', '22310')
#             if s.count('1') == 58 and s.count('2') == 23 and s.count('3') == 15:
#                 print(j)
#                 exit(0)


"""
13 На рисунке представлена схема дорог, связывающих города А, Б, В, Г, Д, Е, Ж, З, И, К, Л, М. По каждой
дороге можно двигаться только в одном направлении, указанном стрелкой. Какова длина самого длинного
пути из города А в город М? Длиной пути считать количество дорог, составляющих этот путь.
"""
# # TODO: Ответ – 12
# start, end = 'А', 'М'
# lines = [
#     'АБ',
#     'БВ',
#     'БГ',
#     'ВГ',
#     'ГД',
#     'ГЕ',
#     'ГЗ',
#     'ГЖ',
#     'ДЕ',
#     'ДИ',
#     'ЕЗ',
#     'ЕК',
#     'ЖЛ',
#     'ЗК',
#     'ЗЖ',
#     'ЗЛ',
#     'ИЕ',
#     'ИК',
#     'ИМ',
#     'КМ',
#     'ЛК',
#     'ЛМ',
# ]
# tmp = [start]
# res = []
# while True:
#     seq = tmp.pop()
#     if seq[-1] == end:
#         res.append(seq)
#         if not tmp:
#             break
#         continue
#     for i in lines:
#         if seq[-1] == i[0]:
#             tmp.append(seq[:-1] + i)
# print(len(sorted(res, key=lambda x: len(x), reverse=True)[0]))


"""
14 (Б.С. Михлин) Число 78 записали в системах счисления с основаниями от 2 до 10 включительно. При
каких основаниях в записи этого числа каждые две соседние цифры имеют разную четность? Например,
число 1234 – подходит, а 1243 – нет, т.к. цифры 2 и 4 имеют одинаковую четность. В ответе укажите сумму
всех подходящих оснований.
"""
# # TODO: Ответ – 32
# res = 0
# for b in range(2, 11):
#     nb = to_base(78, b)
#     flag = True
#     for i in range(len(nb) - 1):
#         if int(nb[i]) % 2 == int(nb[i+1]) % 2:
#             flag = False
#             break
#     if flag:
#         res += b
# print(res)


"""
15 Укажите наименьшее целое значение А, при котором выражение
(xy < 2A) ∨ (x ≥ 11) ∨ (x < 2y)
истинно для любых целых положительных значений x и y.
"""
# # TODO: Ответ – 26
# for A in range(1, 1000):
#     flag = True
#     for x in range(1, 1000):
#         for y in range(1, 1000):
#             f = (x*y < 2*A) or (x >= 11) or (x < 2*y)
#             if not f:
#                 flag = False
#                 break
#         if not flag:
#             break
#     if flag:
#         print(A)
#         break


"""
16 Ниже записаны две рекурсивные функции (процедуры): F и G.Сколько символов «звёздочка» будет
напечатано на экране при выполнении вызова F(13)?
"""
# # TODO: Ответ – 9
# c = 0
#
#
# def F(n):
#     if n > 0:
#         G(n - 1)
#
#
# def G(n):
#     global c
#     print("*")
#     c += 1
#     if n > 1:
#         print("*")
#         c += 1
#     F(n - 2)
#
#
# F(13)
# print(c)


"""
17 (А. Кабанов) В файле 17-257.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые положительные значения до 10 000 включительно.
Необходимо найти минимальный кратный 7 и минимальный кратный 13 элемент последовательности. Если
минимальный кратный 7 больше минимального кратного 13, то программа должна вывести количество
кратных 7, а также максимальный из них. В противном случае программа должна вывести количество
кратных 13, а также максимальный из них.
"""
# # TODO: Ответ – 92 9815
# with open('data/17-257.txt') as f:
#     data = list(map(int, f.readlines()))
# mult7 = [i for i in data if not i % 7]
# mult13 = [i for i in data if not i % 13]
# if min(mult7) > min(mult13):
#     print(len(mult7), max(mult7))
# else:
#     print(len(mult13), max(mult13))


"""
18 (А. Кабанов) Дана последовательность натуральных чисел. Рассматриваются всевозможные пары чисел,
порядковые номера которых отличаются не более чем на 5. Определите количество таких пар, для которых
сумма чисел находится в диапазоне от 1000 до 1500, не включая 1000 и 1500.
Исходные данные записаны в виде столбца электронной таблицы в файле 18-k3.xls.
"""
# # TODO: Ответ – 1519
# with open('data/18-k3.txt') as f:
#     data = list(map(int, f.readlines()))
# c = 0
# for i in range(len(data) - 4):
#     for j in range(i + 1, i + 5):
#         if 1000 < data[i] + data[j] < 1500:
#             c += 1
# print(c)


"""
19, 20, 21 (А.Н. Носкин) Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две
кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну
из куч один камень или увеличить количество камней в куче в два раза. Чтобы делать ходы, у каждого
игрока есть неограниченное количество камней. Игра завершается в тот момент, когда суммарное
количество камней в кучах становится не менее 41. Победителем считается игрок, сделавший последний
ход, т. е. первым получивший позицию, в которой в кучах будет 41 или больше камней.
В начальный момент в первой куче было 9 камней, во второй куче – S камней, 1 ≤ S ≤ 31. Будем говорить,
что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.
Ответьте на следующие вопросы:
 Вопрос 1. Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети.
Назовите минимальное значение S, при котором это возможно.
 Вопрос 2. Найдите два таких значения S, при которых у Пети есть выигрышная стратегия, причём Петя не
может выиграть первым ходом, но может выиграть своим вторым ходом независимо от того, как будет
ходить Ваня. Найденные значения запишите в ответе в порядке возрастания.
 Вопрос 3. Укажите минимальное значение S, при котором у Вани есть выигрышная стратегия,
позволяющая ему выиграть первым или вторым ходом при любой игре Пети, и при этом у Вани нет
стратегии, которая позволит ему гарантированно выиграть первым ходом.
"""
# # TODO: Ответ –
# #  1) 8
# #  2) 4 15
# #  3) 14
# @lru_cache(None)
# def game(x, y):
#     if x + y >= 41:
#         return 0
#     tmp = [game(x + 1, y), game(x, y + 1),
#            game(x * 2, y), game(x, y * 2)]
#     ng = [i for i in tmp if i <= 0]
#     return -max(ng) + 1 if ng else -max(tmp)
#
#
# print(ceil(ceil((41 - 9) / 2) / 2))
# print(*sorted([i for i in range(1, 31) if game(9, i) == 2]))
# print(min([i for i in range(1, 31) if game(9, i) == -2]))


"""
22 (А. Кабанов) В файле 22-33.xls содержится информация о совокупности N вычислительных процессов,
которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от
процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A.
Информация о процессах представлена в файле в виде таблицы. В первом столбце таблицы указан
идентификатор процесса (ID), во втором столбце таблицы – время его выполнения в миллисекундах, в
третьем столбце перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если
процесс является независимым, то в таблице указано значение 0. Определите максимально возможное
целочисленное неизвестное время выполнения процесса t, при котором выполнение всей совокупности
процессов может завершиться не более чем за 107 мс.
Типовой пример организации данных в файле:
Пусть выполнение данной совокупности процессов
закончилось за 15 мс. В данном случае независимые процессы 1 и 2 могут выполняться параллельно, при
этом процесс 1 завершится через 4 мс, а процесс 2 – через 3 мс с момента старта. Процесс 3 может начаться
только после завершения обоих процессов 1 и 2, то есть, через 4 мс после старта. Он длится t мс и
закончится через 4 + t мс после старта. Выполнение процесса 4 может начаться только после завершения
процесса 3, то есть, через 4 + t мс. Он длится 7 мс, так что минимальное время завершения всех процессов
равно 4 + t + 7 = 15 мс. Следовательно, t = 15 – 4 – 7 = 4 мс. Ответ для этого примера: 4.
"""
# # TODO: Ответ – 35


"""
23 Исполнитель Калькулятор преобразует число на экране. У исполнителя есть три команды, которым
присвоены номера:
1. Прибавить 1
2. Умножить на 3
3. Умножить на 4
Программа для исполнителя Калькулятор – это последовательность команд. Сколько существует программ,
для которых при исходном числе 2 результатом является число 60, и при этом траектория вычислений
содержит число 16 и не содержит число 21?
"""
# # TODO: Ответ – 40
# def f(x, n):
#     if x > n or x == 21:
#         return 0
#     if x == n:
#         return 1
#     return f(x + 1, n) + f(x * 3, n) + f(x * 4, n)
#
#
# print(f(2, 16) * f(16, 60))


"""
24 (П.Е. Финкель) Текстовый файл 24-1.txt состоит не более чем из 106
 символов - заглавных латинских
букв и цифр. Определите максимальное нечётное число, записанное в этом файле. Под числом
подразумевается последовательность цифр, ограниченная другими символами (не цифрами).
"""
# # TODO: Ответ – 7642289
# with open('data/24-1.txt') as f:
#     s = f.readline()
# print(max(i for i in map(int, ''.join(i if i.isdigit() else ' ' for i in s).split()) if i % 2))


"""
25 Пусть N(k) = 750 000 + k, где k – натуральное число. Найдите пять наименьших значений k, при которых
N(k) имеет нечётное количество различных чётных делителей. В ответе запишите найденные значения k в
порядке возрастания, справа от каждого значения запишите число чётных делителей N(k).
"""
# # TODO: Ответ –
# #  1538 3
# #  3992 9
# #  6450 27
# #  8912 63
# #  11378 3
# def dels(n):
#     r = []
#     i = 1
#     while i ** 2 <= n:
#         if i ** 2 == n:
#             r.append(i)
#         elif not n % i:
#             r += [i, n // i]
#         i += 1
#     return r
#
#
# c = 0
# for k in range(1, 100000):
#     ned = len([i for i in dels(750000 + k) if not i % 2])
#     if ned % 2:
#         c += 1
#         print(k, ned)
#     if c == 5:
#         break


"""
26 (А. Богданов) Администратор написал скрипт для раскладки N архивов на K дисков, каждый объемом V.
Алгоритм скрипта обрабатывает файлы в порядке убывания их размера. Если файл помещается на диск, то
следующий по размеру файл стараются поместить на следующий диск. Если не помещается, то на
следующий, и так по кругу. Если файл не поместился ни на один диск, то он откладывается в локальную
папку. Укажите в ответе два числа: объем всех отложенных файлов и их количество.
Входные данные представлены в файле 26-56.txt следующим образом. В первой строке входного файла
записаны значения V (объём диска), K (количество дисков) и N (количество архивов). Каждая из
следующих N строк содержит одно целое число – размер очередного архива.
В ответе запишите два числа – объем всех отложенных файлов и их количество.
Пример входного файла:
20 3 10
17
15
13
12
11
7
6
4
3
2
При таких входных данных ответ будет 31 и 4: в локальную папку отложены архивы размером 12, 11, 6 и 2.
"""
# # FIXME: Ответ – Верный 3851 32 | Мой 3854 32
# with open('data/26-56.txt') as f:
#     v, k, n = map(int, f.readline().split())
#     data = list(map(int, f.readlines()))
# data.sort(reverse=True)
# drives = [v] * k
# current_drive_index = 0
# overflow = 0
# local = []
# for archive in data:
#     while True:
#         if drives[current_drive_index] - archive >= 0:
#             drives[current_drive_index] -= archive
#             current_drive_index = (current_drive_index + 1) % k
#             overflow = 0
#             break
#         else:
#             current_drive_index = (current_drive_index + 1) % k
#             overflow += 1
#             if overflow >= k:
#                 local.append(archive)
#                 break
# print(local)
# print(sum(local), len(local))


"""
27 (Е. Джобс) На вход программе подается последовательность целых чисел. Рассматриваются все
непрерывные подпоследовательности исходной последовательности, содержащие одинаковое количество
чисел, кратных 5, и чисел, кратных 7. Программа должна вывести одно число – количество таких
подпоследовательностей. Гарантируется, что в последовательности такая подпоследовательность есть.
Входные данные. Даны два входных файла (файл A и файл B), каждый из которых содержит в первой
строке количество чисел N (100 ≤ N ≤ 5000000). Каждая из следующих N строк файлов содержит одно
целое число, не превышающее по модулю 10000.
Пример входного файла:
10
11
15
8
14
22
24
10
35
9
8
В этом наборе есть следующие подходящие подпоследовательности (в них одинаковое количество чисел,
кратных 5, и чисел, кратных 7):
— 8 последовательностей без чисел, кратных 5 или 7: (11), (8), (22, 24), (22), (24), (9, 8), (9), (8)
— 11 последовательностей, содержащих по одному числу из каждой группы: (11, 15, 8, 14, 22, 24), (11, 15,
8, 14, 22), (11, 15, 8, 14), (15, 8, 14, 22, 24), (15, 8, 14, 22), (15, 8, 14), (8, 14, 22, 24, 10), (14, 22, 24, 10), 
(35, 9, 8), (35, 9), (35)
— 6 последовательностей, содержащих по два числа из каждой группы: (8, 14, 22, 24, 10, 35, 9, 8), (8, 14,
22, 24, 10, 35, 9), (8, 14, 22, 24, 10, 35), (14, 22, 24, 10, 35, 9, 8) , (14, 22, 24, 10, 35, 9), (14, 22, 24, 10, 35)
Общее количество подпоследовательностей равно 8 + 11 + 14 = 25. Ответ: 25.
В ответе укажите два числа: сначала искомое значение для файла А, затем для файла B.
"""
# # TODO: Ответ – 1068
with open('data/27-95a.txt') as f:
    n = int(f.readline())
    data = list(map(int, f.readlines()))
c = 0
for i in range(n):
    c5 = c7 = 0
    for j in range(i, n):
        if not data[j] % 5:
            c5 += 1
        if not data[j] % 7:
            c7 += 1
        if c5 == c7:
            c += 1
print(c)
